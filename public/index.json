[{"content":"Introdução Libxml2 é um XML C parser e toolkit desenvolvido pelo projeto Gnome.\nLibxml2 é conhecida por ser muito portátil, a biblioteca deve ser construída e funcionar sem problemas sérios em uma variedade de sistemas (Linux, Unix, Windows, CygWin, MacOS, RISC Os, OS/2, VMS, QNX, MVS, \u0026hellip;).\nPortanto, este XML parser é universal e pode ser utilizado em diversos casos.\nTutoriais:\nhttp://www.xmlsoft.org/examples/ https://gnome.pages.gitlab.gnome.org/libxml2/tutorial/ https://gnome.pages.gitlab.gnome.org/libxml2/examples/ Repositório:\nhttps://github.com/GNOME/libxml2 Espelho do Repositório:\nhttps://gitlab.gnome.org/GNOME/libxml2 SAX vs DOM vs pull parser TL;DR; Use um analisador DOM ou pull com arquivos menores que caibam na RAM. Use um analisador SAX para arquivos grandes que não cabem.\nDepende totalmente da situação, por exemplo, se o arquivo xml for muito grande, você não pode optar pelos analisadores DOM, pois eles primeiro trazem o arquivo para a memória e depois o analisam. Nesse caso, você deve optar pelo analisador SAX, que é leve e consome menos memória.\nO segundo caso é quando o arquivo não é muito grande. Nesse caso, você pode optar pelo analisador XML pull porque, nesse caso, você terá controle total sobre o XML e poderá pular o ciclo de parsing em qualquer lugar, o que não é possível no SAX. Portanto, se a tag que você está procurando é a primeira no arquivo, então por que você iria percorrer o arquivo inteiro?\nPortanto, até onde sei, se você considerar apenas a velocidade com um arquivo pequeno, use o analisador XML pull e, se o arquivo for grande e você quiser analisar tudo, use o SAX.\nQual é a diferença entre DOM e SAX?\nNo SAX, os eventos são acionados quando o XML está sendo analisado. Quando o analisador está analisando o XML e encontra uma tag iniciando (por exemplo, \u0026lt;algo\u0026gt;), ele aciona o evento tagStarted (o nome real do evento pode ser diferente). Da mesma forma, quando o final da tag é encontrado durante a análise (\u0026lt;/algo\u0026gt;), ele aciona o tagEnded. Usar um analisador SAX implica que você precisa lidar com esses eventos e dar sentido aos dados retornados com cada evento.\nNo DOM, não há eventos acionados durante a análise. O XML inteiro é analisado e uma árvore DOM (dos nós no XML) é gerada e retornada. Depois de analisada, o usuário pode navegar na árvore para acessar os vários dados previamente incorporados nos vários nós do XML.\nEm geral, o DOM é mais fácil de usar, mas tem a sobrecarga de analisar todo o XML antes que você possa começar a usá-lo, ou seja, recomendado para arquivos pequenos.\nSAX (Simple API for XML): É um processador baseado em fluxo. Você tem apenas uma pequena parte na memória a qualquer momento e \u0026ldquo;fareja\u0026rdquo; o fluxo XML implementando o código de retorno de chamada para eventos como tagStarted() etc. Ele quase não usa memória, mas você não pode fazer coisas do \u0026ldquo;DOM\u0026rdquo;, como usar xpath ou percorrer árvores.\nDOM (Document Object Model): Você carrega tudo na memória, o que consome muita memória. Você pode estourar a memória até mesmo com documentos de tamanho médio. Mas você pode usar xpath e percorrer a árvore etc.\nDOM Analisador de modelo de árvore (baseado em objeto) (árvore de nós). O DOM carrega o arquivo na memória e, em seguida, analisa o arquivo. Tem restrições de memória, pois carrega todo o arquivo XML antes de analisá-lo. O DOM é de leitura e gravação (pode inserir ou excluir nós). Se o conteúdo XML for pequeno, prefira o analisador DOM. É possível fazer buscas para trás e para frente para pesquisar as tags e avaliar as informações dentro das tags. Portanto, isso facilita a navegação. Mais lento em tempo de execução. SAX Analisador baseado em eventos (Sequência de eventos). O SAX analisa o arquivo à medida que o lê, ou seja, analisa nó por nó. Não há restrições de memória, pois ele não armazena o conteúdo XML na memória. O SAX é somente leitura, ou seja, não é possível inserir ou excluir o nó. Use o analisador SAX quando o conteúdo da memória for grande. O SAX lê o arquivo XML de cima para baixo e não é possível navegar para trás. Mais rápido em tempo de execução. Diferença resumida Dom Parser - Usa uma abordagem baseada em objetos, ou seja, primeiro carrega todo o XML na memória, converte os nós XML em objetos e, em seguida, começa a analisá-los. Portanto, é bem mais lento.\nAnalisador SAX e PULL - eles usam uma abordagem baseada em eventos. Ambos são praticamente iguais em termos de memória e desempenho. No entanto, há algumas situações distintas sobre quando usá-los, conforme descrito abaixo.\nDom Parser - Use-o quando precisar validar todo o XML antes da análise. Nunca o utilize quando o XML for muito grande e a validação puder ser comprometida. Quando começa a analisar, ele analisa do nó inicial ao nó final. Não há como analisar somente determinados nós.\nSAX - Use-o quando quiser analisar o XML inteiro. Quando começa a analisar, ele analisa do nó inicial ao nó final. Não há como analisar apenas nós específicos.\nPULL - Use-o quando não quiser analisar todo o XML. É mais fácil de implementar do que o SAX, porque você não precisa manter o estado do analisador. Você pode extrair apenas um nó específico no qual esteja interessado.\nMinha sugestão é:\nse precisar de validação, opte pelo DOM; se o tamanho do arquivo for pequeno ou se não estiver interessado em analisar todo o XML, opte pelo PULL; se o tamanho do arquivo for grande ou se precisar analisar todo o arquivo XML, opte pelo SAX. Libere os objetos XML Quando usar DOM, não se esqueça de liberar o buffer e o doc dos objetos xml, principalmente quando o objeto for um membro da classe.\nUse as funções fornecidas pela biblioteca, por exemplo:\nxmlFreeDoc xmlFreeParserCtxt xmlXPathFreeObject xmlXPathFreeContext xmlFreeTextReader xmlFreeTextWriter xmlBufferFree xmlParseFile vs xmlReadFile Embora o tutorial oficial sugira o uso da função xmlParseFile(), ela não é recomendada; em vez disso, use o xmlReadFile. É mais eficiente, respostas no Stack Overflow e mailing list do GNOME também sugerem o uso da função.\nO site oficial possui a seguinte mensagem para a função xmlParseFile:\nDEPRECATED: Use xmlReadFile. parse an XML file and build a tree. Automatic support for ZLIB/Compress compressed document is provided by default if found at compile-time.\nNuma tradução livre:\nDESCONTINUADO: Use xmlReadFile para analisar um arquivo XML e criar uma árvore. O suporte automático para o documento compactado ZLIB/Compress é fornecido por padrão se for encontrado em tempo de compilação.\nPorém, ao invés de xmlReadFile, o novo xmlReader é melhor no quesito que não carrega para a memória todo o arquivo ou o SAX2, porém são mais difíceis de implementar. Creio que em sistemas modernos é muito fácil criar um arquivo XML muito grande, pela grande quantidade de informação. Por mais que a memória RAM esteja maior, todos os outros recursos do computador também estão consumindo mais memória.\nConversão de xmlChar De acordo com a documentação do xmlstring, um xmlChar é um typedef de unsigned char. A descrição a seguir pode ser vista:\nThis is a basic byte in an UTF-8 encoded string. It\u0026rsquo;s unsigned allowing to pinpoint case where char * are assigned to xmlChar * (possibly making serialization back impossible).\nNuma tradução livre:\nEsse é um byte básico em uma string codificada em UTF-8. Não tem sinal, o que permite identificar o caso em que char * é atribuído a xmlChar * (possivelmente impossibilitando a serialização de volta).\nO xmlChar é o tipo básico utilizado na biblioteca libxml2 e as funções xmlCharStrdup ou xmlCharStrndup podem ser usadas para obter um xmlChar * de um char *.\nHá uma macro BAD_CAST definida:\nMacro to cast a string to an xmlChar * when one know its safe.\nNuma tradução livre:\nMacro para converter uma string em um xmlChar * quando se sabe que é seguro.\nPortanto, um literal de string pode ser usado para criar um xmlChar usando a macro BAD_CAST:\nconst xmlChar* languageNode = BAD_CAST \u0026#34;language\u0026#34;; Ler de um Arquivo Se o xmlParseFile já for usado no projeto, o obsoleto xmlParseFile poderá ser usado:\nstd::string fileName = \u0026#34;path/to/file.xml\u0026#34;; xmlDocPtr docPtr = nullptr; docPtr = xmlParseFile( filename.c_str() ); if (docPtr == nullptr) { fprintf( stderr, \u0026#34;Failed to parse %s\\n\u0026#34;, filename.c_str() ); return; } xmlFreeDoc(docPtr); Caso contrário, se o arquivo for pequeno, use o xmlReadFile:\nstd::string fileName = \u0026#34;path/to/file.xml\u0026#34;; xmlDocPtr docPtr = nullptr; docPtr = xmlReadFile(filename.c_str(), NULL, 0); if (docPtr == nullptr) { fprintf( stderr, \u0026#34;Failed to parse %s\\n\u0026#34;, filename.c_str() ); return; } xmlFreeDoc(docPtr); Ler da Memória O xmlParseMemory pode ser usado para ler a partir da memória para tamanhos de buffer pequenos, mas é obsoleto.\nDEPRECATED: Use xmlReadMemory. parse an XML in-memory block and build a tree.\nNuma tradução livre:\nDESCONTINUADO: Use xmlReadMemory. Analise um bloco XML na memória e crie uma árvore.\nconst char *pMemory = \u0026#34;\u0026lt;?xml version=\u0026#39;1.0\u0026#39;?\u0026gt;\\n\\ \u0026lt;document xmlns:xi=\\\u0026#34;http://www.w3.org/2003/XInclude\\\u0026#34;\u0026gt;\\n\\ \u0026lt;p\u0026gt;List of people:\u0026lt;/p\u0026gt;\\n\\ \u0026lt;xi:include href=\\\u0026#34;sql:select_name_from_people\\\u0026#34;/\u0026gt;\\n\\ \u0026lt;/document\u0026gt;\\n\u0026#34;; xmlDocPtr docPtr = nullptr; docPtr = xmlParseMemory(pMemory, strlen(pMemory)); if (docPtr == nullptr) { fprintf( stderr, \u0026#34;Failed to parse %s\\n\u0026#34;, pMemory ); return; } xmlFreeDoc(docPtr); Use o xmlReadMemory em vez da função obsoleta:\nxmlDocPtr docPtr = nullptr; docPtr = xmlReadMemory(pMemory, strlen(pMemory), \u0026#34;pMemory.xml\u0026#34;, NULL, 0); if (docPtr == nullptr) { fprintf( stderr, \u0026#34;Failed to parse %s\\n\u0026#34;, pMemory ); return; } xmlFreeDoc(docPtr); Escrever para Arquivo O xmlNewTextWriterFilename pode ser usado para gravar no arquivo, algumas funções de gravação do xmlwriter usam o xmlTextWriterPtr como argumento para criar o conteúdo do xml.\nDepois de criar o conteúdo, encerre o documento e libere o objeto.\nint rc; std::string str(\u0026#34;/path/to/filename.xml\u0026#34;); xmlTextWriterPtr writer = xmlNewTextWriterFilename(str.c_str(), 0); rc = xmlTextWriterStartDocument(writer, \u0026#34;1.0\u0026#34;, \u0026#34;UTF-8\u0026#34;, NULL); if(rc \u0026lt; 0) { std::cout \u0026lt;\u0026lt; \u0026#34;An error occurred on xmlTextWriterStartDocument.\u0026#34; \u0026lt;\u0026lt; std::endl; } rc = xmlTextWriterStartElement(writer, BAD_CAST \u0026#34;document\u0026#34;); rc = xmlTextWriterWriteAttribute(writer, BAD_CAST \u0026#34;xmlns:xi\u0026#34;, BAD_CAST \u0026#34;http://www.w3.org/2003/XInclude\u0026#34; ); rc = xmlTextWriterWriteFormatComment(writer, \u0026#34;This is a comment\u0026#34; ); rc = xmlTextWriterEndElement(writer); rc = xmlTextWriterWriteString(writer, BAD_CAST \u0026#34;List of people:\u0026#34;); rc = xmlTextWriterEndDocument(writer); xmlFreeTextWriter(writer); Escrever para a Memória O xmlNewTextWriterMemory pode ser usado para gravar na memória do buffer, algumas funções de gravação do xmlwriter usam o xmlTextWriterPtr como argumento para criar o conteúdo do xml.\nDepois de criar o conteúdo, encerre o documento e libere os objetos (escritor e buffer).\nxmlBufferPtr buffer = xmlBufferCreate(); xmlTextWriterPtr writer = xmlNewTextWriterMemory(buffer, 0); rc = xmlTextWriterStartDocument(writer, \u0026#34;1.0\u0026#34;, \u0026#34;UTF-8\u0026#34;, NULL); if(rc \u0026lt; 0) { std::cout \u0026lt;\u0026lt; \u0026#34;An error occurred on xmlTextWriterStartDocument.\u0026#34; \u0026lt;\u0026lt; std::endl; } rc = xmlTextWriterStartElement(writer, BAD_CAST \u0026#34;document\u0026#34;); rc = xmlTextWriterWriteAttribute(writer, BAD_CAST \u0026#34;xmlns:xi\u0026#34;, BAD_CAST \u0026#34;http://www.w3.org/2003/XInclude\u0026#34; ); rc = xmlTextWriterWriteFormatComment(writer, \u0026#34;This is a comment\u0026#34; ); rc = xmlTextWriterEndElement(writer); rc = xmlTextWriterWriteString(writer, BAD_CAST \u0026#34;List of people:\u0026#34;); rc = xmlTextWriterEndDocument(writer); std::string memory = reinterpret_cast\u0026lt;char*\u0026gt; buffer-\u0026gt;content; std::cout \u0026lt;\u0026lt; memory \u0026lt;\u0026lt; std::endl; xmlFreeTextWriter(writer); xmlBufferFree(buffer); Ler SVG Quando você tem um xmlNodePtr de uma árvore xml, o exemplo a seguir usa xmlNodePtr \u0026amp;pNode como argumento da função e o seguinte xml:\n\u0026lt;?xml version=\u0026#34;1.0\u0026#34; encoding=\u0026#34;UTF-8\u0026#34;?\u0026gt; \u0026lt;svg_content\u0026gt; \u0026lt;position\u0026gt;1\u0026lt;/position\u0026gt; \u0026lt;svg xmlns=\u0026#34;http://www.w3.org/2000/svg\u0026#34; id=\u0026#34;1\u0026#34; viewBox=\u0026#34;0 0 585 240\u0026#34; preserveAspectRatio=\u0026#34;xMidYMid meet\u0026#34;\u0026gt; \u0026lt;rect id=\u0026#34;rect_1\u0026#34; x=\u0026#34;0\u0026#34; y=\u0026#34;0\u0026#34; width=\u0026#34;585\u0026#34; height=\u0026#34;20\u0026#34; stroke-width=\u0026#34;1\u0026#34; stroke=\u0026#34;#FFFFFF\u0026#34; fill=\u0026#34;#000000\u0026#34;/\u0026gt; \u0026lt;/svg\u0026gt; \u0026lt;/svg_content\u0026gt; O xmlNodeDump pode ser usado para extrair os dados svg a serem despejados em um renderizador svg:\nPegar o Atributo O xmlNode é a estrutura usada na árvore resultante da análise dos dados xml. O atributo dessa estrutura pode ser acessado a partir de properties.\ntypedef struct _xmlNode xmlNode; typedef xmlNode *xmlNodePtr; struct _xmlNode { void *_private;\t/* application data */ xmlElementType type;\t/* type number, must be second ! */ const xmlChar *name; /* the name of the node, or the entity */ struct _xmlNode *children;\t/* parent-\u0026gt;childs link */ struct _xmlNode *last;\t/* last child link */ struct _xmlNode *parent;\t/* child-\u0026gt;parent link */ struct _xmlNode *next;\t/* next sibling link */ struct _xmlNode *prev;\t/* previous sibling link */ struct _xmlDoc *doc;\t/* the containing document */ /* End of common part */ xmlNs *ns; /* pointer to the associated namespace */ xmlChar *content; /* the content */ struct _xmlAttr *properties;/* properties list */ xmlNs *nsDef; /* namespace definitions on this node */ void *psvi;\t/* for type/PSVI information */ unsigned short line;\t/* line number */ unsigned short extra;\t/* extra data for XPath/XSLT */ }; O seguinte código é um exemplo de como acessar os atributos:\nxmlAttrPtr attribute = svgValues-\u0026gt;properties; xmlChar* content = (char*) xmlNodeListGetString(svgValues-\u0026gt;doc, attribute-\u0026gt;children, 0); Verificar se o arquivo mudou Geralmente os arquivos XML são usados como arquivos de configuração e exigem vários requisitos, que o usuário final não pode alterar o arquivo final manualmente, somente pelo software.\nComo verificar se um arquivo foi alterado?\nIntuitivamente, a data de modificação seria utilizada. Mas essa forma é propensa a erros e a verificação do hash deve ser utilizada.\nConforme esta resposta do SOen, a data de modificação deve ser utilizada pelo desempenho, e se for diferente, realizar a verificação de hash.\nPorque a verificação de hash é computacionalmente pesado, então a verificação de data de modificação é um filtro para diminuir a lista de arquivos.\nReferências libxml2 API Modules libxml2 wiki SAX parser vs XMLPull parser What is the difference between SAX and DOM? Difference among XML SAX parser, Pull parser \u0026amp; DOM Parser in android Tutorial xmlReader SAX2 xmlstring ","permalink":"https://danieltak.com.br/posts/xml/","summary":"Introdução Libxml2 é um XML C parser e toolkit desenvolvido pelo projeto Gnome.\nLibxml2 é conhecida por ser muito portátil, a biblioteca deve ser construída e funcionar sem problemas sérios em uma variedade de sistemas (Linux, Unix, Windows, CygWin, MacOS, RISC Os, OS/2, VMS, QNX, MVS, \u0026hellip;).\nPortanto, este XML parser é universal e pode ser utilizado em diversos casos.\nTutoriais:\nhttp://www.xmlsoft.org/examples/ https://gnome.pages.gitlab.gnome.org/libxml2/tutorial/ https://gnome.pages.gitlab.gnome.org/libxml2/examples/ Repositório:\nhttps://github.com/GNOME/libxml2 Espelho do Repositório:\nhttps://gitlab.gnome.org/GNOME/libxml2 SAX vs DOM vs pull parser TL;DR; Use um analisador DOM ou pull com arquivos menores que caibam na RAM.","title":"XML parser"},{"content":"O que é? O alinhamento de estruturas de dados é a forma que um dado é organizado e acessado na memória do computador. E pode ser organizado em três temas:\nData alignment - alinhamento de dados Data structure padding - preenchimento da estrutura de dados Data structure packing - empacotamento da estrutura de dados Alinhamento Na maioria dos cenários, você nunca precisa se preocupar com o alinhamento porque o alinhamento padrão já é ideal. Mas ao trabalhar com baixo nível e sistemas embarcados, frequentemente irá se deparar com este assunto.\nFunção alignof Para obter o alinhamento, em bytes, o operador alignof() pode ser usado.\nA seguinte estrutura possui um alinhamento de 4 bytes e será explicado na sessão Preenchimento.\n#include \u0026lt;iostream\u0026gt; struct TestStructure { char AA; int BB; char CC; }; int main() { struct TestStructure test; std::cout \u0026lt;\u0026lt; \u0026#34;Size of TestStructure alignment: \u0026#34; \u0026lt;\u0026lt; alignof(test) \u0026lt;\u0026lt; std::endl; } Função alignas Para especificar o alinhamento de uma estrutura o especificador alignas() pode ser usado.\n#include \u0026lt;iostream\u0026gt; struct alignas(8) MyAlignedStructure {}; struct TestStructure { char AA; int BB; char CC; }; int main() { struct TestStructure test; struct MyAlignedStructure testAlignedAs; std::cout \u0026lt;\u0026lt; \u0026#34;Size of TestStructure alignment: \u0026#34; \u0026lt;\u0026lt; alignof(test) \u0026lt;\u0026lt; std::endl; std::cout \u0026lt;\u0026lt; \u0026#34;Size of MyAlignedStructure alignment: \u0026#34; \u0026lt;\u0026lt; alignof(testAlignedAs) \u0026lt;\u0026lt; std::endl; } Resultado:\nSize of TestStructure alignment: 4\rSize of MyAlignedStructure alignment: 8 Quando múltiplos alignas são aplicados à mesma declaração, aquele com o maior valor é usado. Um alignas valor de 0 é ignorado.\n#include \u0026lt;iostream\u0026gt; struct alignas(8) alignas(16) MyAlignedStructure {}; struct TestStructure { char AA; int BB; char CC; }; union alignas(0) U1 { int i; float f; }; union U2 { int i; float f; }; int main() { struct TestStructure test; struct MyAlignedStructure testAlignedAs; union U1 firstUnion; union U2 secondUnion; std::cout \u0026lt;\u0026lt; \u0026#34;Size of TestStructure alignment: \u0026#34; \u0026lt;\u0026lt; alignof(test) \u0026lt;\u0026lt; std::endl; std::cout \u0026lt;\u0026lt; \u0026#34;Size of MyAlignedStructure alignment: \u0026#34; \u0026lt;\u0026lt; alignof(testAlignedAs) \u0026lt;\u0026lt; std::endl; std::cout \u0026lt;\u0026lt; \u0026#34;Size of firstUnion alignment: \u0026#34; \u0026lt;\u0026lt; alignof(firstUnion) \u0026lt;\u0026lt; std::endl; std::cout \u0026lt;\u0026lt; \u0026#34;Size of secondUnion alignment: \u0026#34; \u0026lt;\u0026lt; alignof(secondUnion) \u0026lt;\u0026lt; std::endl; } Resultado:\nSize of TestStructure alignment: 4\rSize of MyAlignedStructure alignment: 16\rSize of firstUnion alignment: 4\rSize of secondUnion alignment: 4 Você pode fornecer um tipo como o valor de alinhamento. O alinhamento padrão do tipo é usado como o valor de alinhamento.\n#include \u0026lt;iostream\u0026gt; union alignas(long) U1 { int i; float f; }; union U2 { int i; float f; }; int main() { union U1 firstUnion; union U2 secondUnion; std::cout \u0026lt;\u0026lt; \u0026#34;Size of firstUnion alignment: \u0026#34; \u0026lt;\u0026lt; alignof(firstUnion) \u0026lt;\u0026lt; std::endl; std::cout \u0026lt;\u0026lt; \u0026#34;Size of secondUnion alignment: \u0026#34; \u0026lt;\u0026lt; alignof(secondUnion) \u0026lt;\u0026lt; std::endl; } Resultado:\nSize of firstUnion alignment: 8\rSize of secondUnion alignment: 4 Um pacote de parâmetros de modelo (alignas (pack...)) pode ser usado para o valor de alinhamento. O maior valor de alinhamento de todos os elementos da embalagem é usado.\n#include \u0026lt;iostream\u0026gt; template \u0026lt;typename... Ts\u0026gt; class alignas(Ts...) C2 { char c; }; int main() { C2\u0026lt;\u0026gt; c1; C2\u0026lt;short, int\u0026gt; c4; C2\u0026lt;int, float, double\u0026gt; c8; std::cout \u0026lt;\u0026lt; \u0026#34;Size of c1 alignment: \u0026#34; \u0026lt;\u0026lt; alignof(c1) \u0026lt;\u0026lt; std::endl; std::cout \u0026lt;\u0026lt; \u0026#34;Size of c4 alignment: \u0026#34; \u0026lt;\u0026lt; alignof(c4) \u0026lt;\u0026lt; std::endl; std::cout \u0026lt;\u0026lt; \u0026#34;Size of c8 alignment: \u0026#34; \u0026lt;\u0026lt; alignof(c8) \u0026lt;\u0026lt; std::endl; return 0; } Resultado:\nSize of c1 alignment: 1\rSize of c4 alignment: 4\rSize of c8 alignment: 8 Preenchimento A maioria dos compiladores, quando você declara um struct, insere preenchimento entre os membros para garantir que eles sejam alinhados aos endereços apropriados na memória (geralmente um múltiplo do tamanho do tipo). Isso evita a penalidade de desempenho (ou erro total) em algumas arquiteturas associadas ao acesso a variáveis que não estão alinhadas corretamente.\nNo exemplo abaixo, temos duas variáveis do tipo char, AA e CC, e uma do tipo int, nomeada BB.\n#include \u0026lt;iostream\u0026gt; struct TestStructure { char AA; int BB; char CC; }; int main() { struct TestStructure test; std::cout \u0026lt;\u0026lt; \u0026#34;Size of char:\u0026#34; \u0026lt;\u0026lt; \u0026#34; \u0026#34; \u0026lt;\u0026lt; sizeof(test.AA) \u0026lt;\u0026lt; std::endl; std::cout \u0026lt;\u0026lt; \u0026#34;Size of int:\u0026#34; \u0026lt;\u0026lt; \u0026#34; \u0026#34; \u0026lt;\u0026lt; sizeof(test.BB) \u0026lt;\u0026lt; std::endl; std::cout \u0026lt;\u0026lt; \u0026#34;Size of char:\u0026#34; \u0026lt;\u0026lt; \u0026#34; \u0026#34; \u0026lt;\u0026lt; sizeof(test.CC) \u0026lt;\u0026lt; std::endl; } O tamanho individual de cada variável foi obitda com a função sizeof() e a seguinte saída:\nSize of char: 1\rSize of int: 4\rSize of char: 1 Qual é o tamanho da struct?\nIntuitivamente falamos que seria a soma das variáveis da estrutura, ou seja, 6 bytes.\nPorém, essa afirmação está errada e usando a função sizeof(), verificamos que o tamanho da estrutura é de 12 bytes!\nIsso ocorre por causa do preenchimento (padding), conforme ilustrado abaixo:\n| 1 | 2 | 3 | 4 |\r| AA(1) | pad.................. | // 1 byte + 3 bytes pad\r| BB(1) | BB(2) | BB(3) | BB(4) | // 4 bytes\r| CC(1) | pad.................. | // 1 byte + 3 bytes pad A variável AA ocupa 4 bytes, sendo 1 byte a variável e 3 bytes de preenchimento.\n#pragma pack O #pragma pack instrui o compilador a empacotar os membros da estrutura com um alinhamento específico. A maioria dos compiladores, quando você declara um struct, insere preenchimento entre os membros para garantir que eles sejam alinhados aos endereços apropriados na memória (geralmente um múltiplo do tamanho do tipo de dado).\nEntão ao especificar #pragma pack(1), o alinhamento é de 1 byte para todos os membros do escopo daquela definição. Menos para as struturas que forem sobrescritas com alignas() ou outra forma de alterar o alinhamento.\n#include \u0026lt;iostream\u0026gt; #pragma pack(1) struct alignas(2) MyAlignedStructure {}; struct TestStructure { char AA; int BB; char CC; }; int main() { struct TestStructure test; struct MyAlignedStructure testAlignedAs; std::cout \u0026lt;\u0026lt; \u0026#34;Size of TestStructure alignment: \u0026#34; \u0026lt;\u0026lt; alignof(test) \u0026lt;\u0026lt; std::endl; std::cout \u0026lt;\u0026lt; \u0026#34;Size of MyAlignedStructure alignment: \u0026#34; \u0026lt;\u0026lt; alignof(testAlignedAs) \u0026lt;\u0026lt; std::endl; std::cout \u0026lt;\u0026lt; \u0026#34;Size of testAlignedAs struct:\u0026#34; \u0026lt;\u0026lt; \u0026#34; \u0026#34; \u0026lt;\u0026lt; sizeof(testAlignedAs) \u0026lt;\u0026lt; std::endl; std::cout \u0026lt;\u0026lt; \u0026#34;Size of test struct:\u0026#34; \u0026lt;\u0026lt; \u0026#34; \u0026#34; \u0026lt;\u0026lt; sizeof(test) \u0026lt;\u0026lt; std::endl; } Resultado:\nSize of TestStructure alignment: 1\rSize of MyAlignedStructure alignment: 2\rSize of testAlignedAs struct: 2\rSize of test struct: 6 Então com o alinhamento de 1 byte, o tamanho da estrutura é a soma de seus membros.\nE ao utilizar um alinhamento de 2 bytes?\n#include \u0026lt;iostream\u0026gt; #pragma pack(2) struct alignas(2) MyAlignedStructure {}; struct TestStructure { char AA; int BB; char CC; }; int main() { struct TestStructure test; struct MyAlignedStructure testAlignedAs; std::cout \u0026lt;\u0026lt; \u0026#34;Size of TestStructure alignment: \u0026#34; \u0026lt;\u0026lt; alignof(test) \u0026lt;\u0026lt; std::endl; std::cout \u0026lt;\u0026lt; \u0026#34;Size of MyAlignedStructure alignment: \u0026#34; \u0026lt;\u0026lt; alignof(testAlignedAs) \u0026lt;\u0026lt; std::endl; std::cout \u0026lt;\u0026lt; \u0026#34;Size of testAlignedAs struct:\u0026#34; \u0026lt;\u0026lt; \u0026#34; \u0026#34; \u0026lt;\u0026lt; sizeof(testAlignedAs) \u0026lt;\u0026lt; std::endl; std::cout \u0026lt;\u0026lt; \u0026#34;Size of test struct:\u0026#34; \u0026lt;\u0026lt; \u0026#34; \u0026#34; \u0026lt;\u0026lt; sizeof(test) \u0026lt;\u0026lt; std::endl; } Resultado:\nSize of TestStructure alignment: 2\rSize of MyAlignedStructure alignment: 2\rSize of testAlignedAs struct: 2\rSize of test struct: 8 Então a estrutura é empacotada da seguinte forma:\n| 1 | 2 |\r| AA(1) | pad.. | // 1 byte + 1 byte pad\r| BB(1) | BB(2) | // 2 bytes\r| BB(3) | BB(4) | // 2 bytes\r| CC(1) | pad.. | // 1 byte + 1 byte pad Problema O artigo \u0026ldquo;Anybody who writes #pragma pack(1) may as well just wear a sign on their forehead that says “I hate RISC”\u0026rdquo; explica os riscos de usar o #pragma pack(1).\nIsso é verdade em sistemas desktop, porém em sistemas embarcados, nem tanto\u0026hellip;\nEm muitos casos o gargalo não está no processamento, mas em outros locais, como a comunicação. Então a perda de desempenho na otimização do processamento se torna aceitável, ao ganhar mais espaço para criar um pacote de dados e evitar os preenchimentos, ou até mesmo para dar compatibilidade entre dispositivos diferentes.\nPortanto, cada caso deve ser analisado e não existem dogmas.\nOpinião Não utilizar as diretivas de compilador #pragma, pois ela é dependente do compilador utilizado. A maioria dos compiladores possuem suporte e um comportamento similar, mas em raros casos isso não é verdade. E é bem quando você precisar entregar o projeto atrasado, que a nova versão de um compilador pode quebrar tudo.\nEsse tipo de abordagem é muito utilizado por programador de C ou programadores muito experientes acostumados com o C++ 98.\nO recomendado é se manter no STL do C++ e usar as funções padrões fornecidas e testadas pelo mundo inteiro.\nMas nos casos em que é necessário usar o pragma pack, opte por usar o push e o pop.\nAprofundamento A principal referência é o The Lost Art of Structure Packing, um guia em inglês que aborda em outras linguagens de programação.\nTambém é possível usar as diretivas #pragma pack(push, n) e #pragma pack(pop).\nUm artigo no Geek for Geeks é sempre recomendado.\nReferências Alinhamento - Microsoft C++ Structure padding and packing The Lost Art of Structure Packing alignof() - Cpp Reference alignas() - Cpp Reference #pragma pack effect Anybody who writes #pragma pack(1) may as well just wear a sign on their forehead that says “I hate RISC” Structure Member Alignment, Padding and Data Packing ","permalink":"https://danieltak.com.br/posts/alinhamento-estrutura/","summary":"O que é? O alinhamento de estruturas de dados é a forma que um dado é organizado e acessado na memória do computador. E pode ser organizado em três temas:\nData alignment - alinhamento de dados Data structure padding - preenchimento da estrutura de dados Data structure packing - empacotamento da estrutura de dados Alinhamento Na maioria dos cenários, você nunca precisa se preocupar com o alinhamento porque o alinhamento padrão já é ideal.","title":"Alinhamento, Preenchimento e Empacotamento de Estruturas de Dados"},{"content":"Introdução Como diria o ditado popular:\nA curiosidade matou o gato.\nMas bem-aventurado esse gato que fez muita coisa na vida e inclusive errou!\nAfinal, errar é humano e todos erramos diariamente, não podemos ter medo de desbravar o desconhecido ou de perguntar aos outros. Quando mais novo, era uma pessoa introvertida e demorei para entender isso\u0026hellip;\nEsse será um blog com algumas dessas pequenas aventuras sobre o conhecimento.\nObjetivo O principal tema será sobre programação e problemas que achei difícil encontrar informação, principalmente no cotidiano do programador.\nMas alguns devaneios também podem ocorrer, como receitas culinárias ou filosofia e paradigmas da programação.\nMinha breve história Sou graduado em Engenharia Elétrica e comecei a carreira trabalhando na indústria, então muitas vezes trarei assuntos sobre o baixo nível e sistemas embarcados, com sensores, instrumentos, controladores, protocolos de comunicação, sistemas de visão e IHMs.\nHoje faço software para Sistemas Embarcados utilizando principalmente o C++ e Linux, mas já fui administrador de Windows Server e fiz muito website para parentes e amigos, inclusive participei de uma start-up usando o framework Laravel e a linguagem PHP.\nNo trabalho corporativo estou acostumado a escrever muitos relatórios e usar muito a terceira pessoa, pois me ensinaram que o relatório deve ser impessoal. Tentarei mudar esse estilo de escrita, fazendo algo mais pessoal e divertido.\nMotivação Eu sempre gostei de programar e descobrir tecnologias novas, inclusive, participei muito do StackOverflow e outros fóruns de ajuda mais antigos. Realizo algumas anotações em inglês de problemas interessantes que encontrei no cotidiano, mas nunca formalizei em nenhum lugar essa informação e sempre tive a vontade de escrever um blog.\nNa universidade pública que fiz minha graduação, frequentemente reforçavam que estávamos estudando com o dinheiro público, portanto, devemos sempre que puder, devolver um pouco desse conhecimento para a sociedade e agir com ética.\nIdioma A Língua Portuguesa será a principal escolha pelos seguintes motivos:\nDevolver à sociedade brasileira um pouco do que ganhei com a educação pública; Há muito conteúdo de qualidade em inglês e a concorrência é alta; O meu domínio .com.br possui maior alcance no Brasil; Ajudar a comunidade lusófona com conteúdo um pouco mais específico. Por escolher um conteúdo específico o público será reduzido, mas é o público-alvo que desejo.\nConteúdo Tentarei evitar aqueles conteúdos com receitas de bolos ou chamadas sensacionalistas do tipo:\n10 motivos de usar tal tecnologia para melhorar sua carreira!\nQuem precisa dessas chamadas clickbait são vendedores de cursos ou influencers que ganham a vida com o conteúdo.\nNem sempre a profundidade do conteúdo será grande, mas prometo que tentarei usar investigações técnicas e evitar alguns achismos.\n","permalink":"https://danieltak.com.br/posts/ola-mundo/","summary":"Introdução Como diria o ditado popular:\nA curiosidade matou o gato.\nMas bem-aventurado esse gato que fez muita coisa na vida e inclusive errou!\nAfinal, errar é humano e todos erramos diariamente, não podemos ter medo de desbravar o desconhecido ou de perguntar aos outros. Quando mais novo, era uma pessoa introvertida e demorei para entender isso\u0026hellip;\nEsse será um blog com algumas dessas pequenas aventuras sobre o conhecimento.\nObjetivo O principal tema será sobre programação e problemas que achei difícil encontrar informação, principalmente no cotidiano do programador.","title":"Olá Mundo!"}]