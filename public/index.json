[{"content":"Introdução Quando se trata de Sistema Operacional (SO) para desktop, como engenheiro e funcionário do mundo corporativo, a escolha sempre foi o Windows, pela compatibilidade com os softwares utilizados e o controle da TI. Mas para programação, o Linux pode ser uma alternativa em muitos casos, mas em empresas o Departamento de TI normalmente liberará somente o Windows.\nJá para servidores este cenário é um pouco diferente\u0026hellip;\nPois para desenvolvimento, necessitamos dos últimos pacotes ou de muitos drivers. Já para ambiente de produção, o principal é a robustes e alta disponibilidade. Os pacotes de desenvolvimento normalmente não estão instalados nos servidores ou demoram para serem atualizados.\nNa maioria dos casos de desenvolvimento um Windows com virtualização do Linux atende as necessidades, em outros um dual boot com Windows e Linux é necessário. Porém, eu tive mais problemas do que soluções com o dual boot, quem já usou o dual boot sabe que o Windows Updater acaba desconfigurando o boot loader (GRUB).\nPara atividades diretamente ligadas ao Hardware ou com otimizações da GPU, creio que o acesso direto ao hardware, sem virtualização, é importante.\nEntão qual sistema operacional eu devo usar?\nA resposta sempre é, depende.\nLinux vs Windows para Servidores Como usuário de Open Source e que não gostaria de gastar muito dinheiro com licenças, a opção de Linux é óbvia.\nMas vamos analisar um pouco as vantagens do Windows. Possui suporte e hotline, amplamente utilizado, com muitos profissionais para prestar serviço de suporte, muitos dos softwares pagos e validados em corporações possuem maior compatibilidade com Windows. Ou seja, é um ganha pão melhor para possuir clientes ou um trabalho.\nA maioria das vezes a escolha deste SO é pela transferência responsabilidade para a prestadora de serviços e não se preocupar com o SO, que é algo complexo e muitas vezes não é necessário uma equipe ou colaborador para prestar suporte ao SO.\nUma grande desvantagem que presenciei na vida profissional, muitos detalhes são extremamente específicos do Windows e há pouca informação sobre estes detalhes mais incomuns. Um \u0026ldquo;dinossauro\u0026rdquo; da área foi consultado ($$) e muitos problemas foram resolvidos, porém estas informações não estavam documentadas ou facilmente encontradas.\nPara uma empresa corporativa, em que é necessário um Windows Server para gerenciar os usuários, e-mails e policies. Como administrador do sistema, o Windows Server seria a melhor opção e o custo adicional não seria o problema para uma empresa grande.\nA escolha para alguém que não possui muito dinheiro seria o Linux, correto? Sim, mas qual das distribuições?\nDistribuição Linux RHEL (Red Hat) é pago e a fundação terminou o projeto de desenvolvimento do CentOS ( Open source ) em 2020. Por vários motivos, mas esse era a alternativa mais utilizada do mercado.\nRecentemente compraram o Fedora e muitos cogitam a possibilidade do Red Hat Foundation matar este SO também.\nPelo que pesquisei as mais utilizadas recentemente são Ubuntu Server e Debian.\nDebian vs Ubuntu O Ubuntu é um fork do Debian que está na versão mais instável, porém é mais atualizado e possui funcionalidades mais novas. Recomendado para o usuário que trabalha com pesquisas ou projetos ultra modernos e necessita de recursos mais recentes, inclusive drivers para hardwares que lançaram recentemente.\nJá o Debian lança um release estável com mais tempo e testes, portanto, alguns recursos são desatualizados, por outro lado, é muito mais estável.\nComo meu foco é possuir um servidor estável, com utilização de recursos estáveis e testados, que não me dê problemas e com um Hardware mais barato. A escolha do Debian ficou fácil.\nMas instalar um servidor com GUI? Se sim, qual a escolha do ambiente gráfico?\nDebian e Ubuntu são duas distribuições Linux populares usadas como sistemas operacionais de desktop e servidor. Ambas são distros de código aberto com excelente reputação e bases de usuários consideráveis. No entanto, existem algumas diferenças entre os dois que tornam um ou outro mais adequado para determinados casos de uso.\nO Debian está entre as distribuições Linux mais antigas e confiáveis ​​do mercado. É a escolha certa para ambientes que priorizam a estabilidade e a segurança do sistema, como servidores de produção. O suporte e a confiabilidade de longo prazo do Debian fazem dele uma opção preferida para servidores que exigem operação ininterrupta e sem surpresas. A equipe de segurança do Debian tem um histórico comprovado de patches de segurança eficazes e oportunos. O gerenciador de pacotes do Debian (Advanced Package Tool, ou APT, abreviadamente) simplifica as instalações e atualizações de software. O Debian é um projeto conduzido pela comunidade, portanto não há nenhuma entidade comercial por trás desta distribuição Linux.\nO Ubuntu, por outro lado, é uma distribuição mais amigável e versátil, mais adequada para uso em desktop. É baseado no Debian e compartilha muitos de seus recursos, mas tem um ciclo de lançamento mais rápido e é mais avançado. Ubuntu é uma boa escolha para servidores que exigem os recursos e atualizações de software mais recentes. Ele também possui uma base de usuários maior e mais opções de suporte comercial que o Debian.\nEm resumo, se você prioriza estabilidade e segurança em vez de novos recursos e atualizações de software, o Debian é a melhor escolha para o seu servidor. Se você deseja uma distribuição mais amigável e versátil, mais adequada para uso em desktop, o Ubuntu é a escolha certa.\nKDE vs GNOME O GNOME possui um design moderno e diferente, porém menos ferramentas. Por ser utilizado no Ubuntu, creio que seja muito robusto e com atualizações mais rápidas.\nComo programador de Qt, com o KDE eu consigo contribuir, utilizar as múltiplas ferramentas oferecidas pela comunidade e possui um design mais parecido com o do Windows. Tudo isso, consumindo menos recursos. A distribuição mais conhecida é o KUbuntu.\nKDE e GNOME são dois ambientes de desktop populares para sistemas operacionais Linux. Ambos têm seus próprios pontos fortes e fracos, e a escolha entre eles depende de suas preferências e necessidades pessoais.\nO KDE é conhecido por seu rico conjunto de recursos e capacidade de personalização. Ele oferece um layout de área de trabalho tradicional confortável para a maioria dos usuários do Windows. A aparência consistente do KDE, mesmo com inúmeras melhorias ao longo dos anos, é um dos seus pontos fortes. O KDE também é conhecido pela sua liberdade na configuração e design de aplicações.\nO GNOME, por outro lado, oferece um design de interface de usuário exclusivo e moderno. É uma boa escolha se você deseja uma experiência de desktop diferente. Os ícones, temas e papéis de parede do GNOME podem parecer melhores em relação aos padrões modernos. No entanto, ajustar o fluxo de trabalho pode demorar um pouco se você já estiver confortável com o layout tradicional do Windows. O GNOME é conhecido por sua base de fãs e suporte da comunidade.\nEm resumo, o KDE é uma boa escolha se você prioriza a personalização e um layout de desktop tradicional. O GNOME é uma boa escolha se você deseja um design de interface de usuário exclusivo e moderno.\n","permalink":"https://danieltak.com.br/posts/choices-sistema-operacional/","summary":"Introdução Quando se trata de Sistema Operacional (SO) para desktop, como engenheiro e funcionário do mundo corporativo, a escolha sempre foi o Windows, pela compatibilidade com os softwares utilizados e o controle da TI. Mas para programação, o Linux pode ser uma alternativa em muitos casos, mas em empresas o Departamento de TI normalmente liberará somente o Windows.\nJá para servidores este cenário é um pouco diferente\u0026hellip;\nPois para desenvolvimento, necessitamos dos últimos pacotes ou de muitos drivers.","title":"Escolha do Sistema Operacional"},{"content":"Por quê? Em uma resposta do website Server Fault de 2012, \u0026ldquo;Eu devo parar de usar o ifconfig?\u0026rdquo;.\nA resposta é a seguinte:\nO comando /bin/ip já existe há algum tempo. Mas as pessoas continuam usando o comando antigo /sbin/ifconfig. Sejamos claros: o ifconfig não irá desaparecer rapidamente, mas sua versão mais recente, ip, é mais poderosa e eventualmente irá substituí-lo.\nA página man do ip pode parecer intimidante no início, mas depois que você se familiarizar com a sintaxe do comando, será uma leitura fácil. Esta página não apresentará os novos recursos do ip. Em vez disso, apresenta uma comparação lado a lado entre ifconfig e ip para obter uma visão geral rápida da sintaxe do comando.\nDa mesma forma, os comandos arp, route e netstat também estão obsoletos.\nO Iproute2 é uma coleção de utilidades para o controle de rede e tráfego TCP/IP e substitui o ifconfig (antigo net-tools) no Linux.\nOpinião Nessa discussão de parar de usar o comando ifconfig o único motivo de manter o uso é de que é mais simples e curto. Mas eu, pessoalmente, prefiro um método mais completo e que o comando, por mais longo que seja, descreva a sua intenção, para eu conseguir ler o código com fluidez. Sem precisar ficar pesquisando o manual de cada função\u0026hellip;\nOutro motivo são os sistemas mais modernos, redes de empresas com firewall e afins, o ifconfig é muito útil para testes e configurar manualmente um dispositivo simples. Mas no momento em que são necessários rotas, switches e muitos outros parâmetros, um método mais robusto deve ser utilizado.\nOutro motive é que o net-tools não é mais mantido e atualizado, o post ifconfig sucks explica melhor os problemas do ifconfig nos sistemas atuais.\nPor que não aprender uma ferramenta completa? No mundo da era da internet e da Indústria 4.0, com certeza você vai se deparar com uma rede mais complexa.\nReferência Should I quit using Ifconfig? ip Deprecated Linux networking commands and their replacements ifconfig sucks Iproute2 ","permalink":"https://danieltak.com.br/posts/nao-use-ifconfig/","summary":"Por quê? Em uma resposta do website Server Fault de 2012, \u0026ldquo;Eu devo parar de usar o ifconfig?\u0026rdquo;.\nA resposta é a seguinte:\nO comando /bin/ip já existe há algum tempo. Mas as pessoas continuam usando o comando antigo /sbin/ifconfig. Sejamos claros: o ifconfig não irá desaparecer rapidamente, mas sua versão mais recente, ip, é mais poderosa e eventualmente irá substituí-lo.\nA página man do ip pode parecer intimidante no início, mas depois que você se familiarizar com a sintaxe do comando, será uma leitura fácil.","title":"Não use o ifconfig"},{"content":"Introdução Se você deseja enviar um sinal para um thread, você pode usar pthread_kill(), embora não seja semanticamente correto, a página man7 afirma:\nA função pthread_kill() envia o sinal sig para thread, um thread no mesmo processo que o chamador. O sinal é direcionado de forma assíncrona ao thread.\nSe sig for 0, nenhum sinal será enviado, mas a verificação de erros ainda será realizada.\nVivo ou Morto? Thread Um código para obter o sinal de uma thread e verificar se a thread está \u0026ldquo;viva\u0026rdquo;:\npthread_t m_iThreadID = your_thread_id_here; int\tiStatus = pthread_kill( m_iThreadID, 0 ); if( iStatus != 0 ) { // Thread Stopped! std::cout \u0026lt;\u0026lt; \u0026#34;pthread_kill Error: \u0026#34; \u0026lt;\u0026lt; errno \u0026lt;\u0026lt; std::endl; } Porém, é semanticamente estranho usar uma função kill para recuperar um sinal e não matar o thread, certo?\nEmbora pareça estranho, pthread_kill() é amplamente utilizado e possui muitos tutoriais e exemplos.\nSe você quiser usar outra função ou enviar parâmetros, pthread_sigqueue() pode ser usado. Da página de manual:\nA função pthread_sigqueue() executa uma tarefa semelhante a sigqueue(3), mas, em vez de enviar um sinal para um processo, ele envia um sinal para um thread no mesmo processo que o thread chamador.\nO argumento thread é o ID de um thread no mesmo processo que o chamador. O argumento sig especifica o sinal a ser enviado. O argumento value especifica dados para acompanhar o sinal; ver sigqueue(3) para detalhes.\nO argumento opcional na página de manual:\nO argumento value é usado para especificar um item acompanhante de dados (um número inteiro ou um valor de ponteiro) a serem enviados com o sinal, e tem o seguinte tipo:\nunion sigval { int sival_int; void *sival_ptr; }; Um exemplo com um argumento value nulo:\npthread_t m_iThreadID = your_thread_id_here; sigval_t siValue; int\tiStatus = pthread_sigqueue( m_iThreadID, 0, siValue ); if( iStatus != 0 ) { // Thread Stopped! std::cout \u0026lt;\u0026lt; \u0026#34;pthread_sigqueue Error: \u0026#34; \u0026lt;\u0026lt; errno \u0026lt;\u0026lt; std::endl; } Processos O mesmo pode ser aplicado aos processos!\nA função kill() pode ser usada para obter o status de uma função, na página man:\nA chamada de sistema kill() pode ser usada para enviar qualquer sinal para qualquer grupo de processos ou processo.\nSe pid for positivo, então o sinal sig é enviado ao processo com o ID especificado pelo pid.\nSe pid for igual a 0, então sig é enviado para todos os processos do processo grupo do processo de chamada.\nSe pid for igual a -1, então sig é enviado para todos os processos para os quais o o processo de chamada tem permissão para enviar sinais, exceto para processo 1 (init), mas veja abaixo.\nSe pid for menor que -1, então sig é enviado para todos os processos no grupo de processos cujo ID é -pid.\nSe sig for 0, nenhum sinal será enviado, mas as verificações de existência e permissão ainda são realizadas; isso pode ser usado para verificar a existência de um ID de processo ou ID de grupo de processos que o chamador está permitido sinalizar.\nPara que um processo tenha permissão para enviar um sinal, ele deve ser privilegiado (no Linux: ter o recurso CAP_KILL no namespace do usuário do processo alvo), ou o real ou efetivo ID do usuário do processo de envio deve ser igual à configuração real ou salva. No caso do SIGCONT, é suficiente quando os processos de envio e recebimento pertencem ao mesma sessão. (Historicamente, as regras eram diferentes; veja NOTAS.)\nUm exemplo:\npid_t m_iProcID = your_proc_id_here; int\tiStatus = kill( m_iProcID, 0 ); if( iStatus != 0 ) { // Process Stopped! std::cout \u0026lt;\u0026lt; \u0026#34;kill Error: \u0026#34; \u0026lt;\u0026lt; errno \u0026lt;\u0026lt; std::endl; } Or to use sigqueue():\npid_t m_iProcID = your_proc_id_here; sigval_t siValue; int\tiStatus = sigqueue( m_iProcID, 0, siValue ); if( iStatus != 0 ) { // Process Stopped! std::cout \u0026lt;\u0026lt; \u0026#34;sigqueue Error: \u0026#34; \u0026lt;\u0026lt; errno \u0026lt;\u0026lt; std::endl; } Referência pthread_kill man7 pthread_sigqueue kill ","permalink":"https://danieltak.com.br/posts/enviar-sinal-pthread/","summary":"Introdução Se você deseja enviar um sinal para um thread, você pode usar pthread_kill(), embora não seja semanticamente correto, a página man7 afirma:\nA função pthread_kill() envia o sinal sig para thread, um thread no mesmo processo que o chamador. O sinal é direcionado de forma assíncrona ao thread.\nSe sig for 0, nenhum sinal será enviado, mas a verificação de erros ainda será realizada.\nVivo ou Morto? Thread Um código para obter o sinal de uma thread e verificar se a thread está \u0026ldquo;viva\u0026rdquo;:","title":"Enviar Sinal para Pthread ou Processo"},{"content":"Introdução O tempo parece tão simples e trivial, mas ao mesmo tempo um conceito complexo e relativo. Desde muito tempo atrás o estudo sobre o tempo é realizado, na faculdade fiz um resumo do estudo de Aristóteles sobre o tempo, e até os dias de hoje as pessoas ainda debatem sobre o estudo dele e de muitos outros que vieram posteriormente.\nMas e no C++?\nNeste post explicarei um pouco sbre a biblioteca STL do C++ std::chrono, num post anterior expliquei sobre o tempo no Linux.\nTempo Decorrido No C++ 11 o std::chrono::steady_clock foi implementado e um TL;DR; será demonstrado nesta seção com um snippet pequeno de como obter o tempo decorrido.\nPara mais detalhes, nas próximas seções uma explicação mais detalhada será realizada.\nO código a seguir tem uma função de template since() usada para contar o tempo decorrido.\nNa seção de tempo do Working Draft do Cpp, a explicação sobre a biblioteca chrono de C++ e a biblioteca ctime de C pode ser visualizada.\n// .h #include \u0026lt;chrono\u0026gt; std::chrono::steady_clock::time_point m_testTimer; template \u0026lt; class result_t = std::chrono::milliseconds, class clock_t = std::chrono::steady_clock, class duration_t = std::chrono::milliseconds \u0026gt; auto since(std::chrono::time_point\u0026lt;clock_t, duration_t\u0026gt; const\u0026amp; start) { return std::chrono::duration_cast\u0026lt;result_t\u0026gt;(clock_t::now() - start); } // .cpp m_testTimer = std::chrono::steady_clock::now(); // Do something std::cout \u0026lt;\u0026lt; \u0026#34;Time elapsed (ms):\u0026#34; \u0026lt;\u0026lt; since(m_testTimer).count() \u0026lt;\u0026lt; std::endl; Quando quiser medir o tempo que o código leva para retornar a esta função, você pode resetar no final da tarefa com now(), medir no início da função e inicializar a variável no construtor com o seguinte pseudocódigo no arquivo cpp:\n// .cpp //constructor m_testTimer = std::chrono::steady_clock::now(); // function std::cout \u0026lt;\u0026lt; \u0026#34;Time elapsed (ms):\u0026#34; \u0026lt;\u0026lt; since(m_testTimer).count() \u0026lt;\u0026lt; std::endl; // Do something m_testTimer = std::chrono::steady_clock::now(); Um exemplo é na robótica ou controle de posição, que é um controle muito rápido, diferente do de temperatura. Então o tempo de scan do processador ou de comunicação com outros sistemas pode interferir no resultado, use o pseudocódigo anterior para obter o tempo que a função leva para ser chamada.\nC++11 Essencialmente, a funcionalidade de fuso horário (C++20) é baseada na funcionalidade de calendário (C++20), que são baseadas na funcionalidade chrono (C++11). Consequentemente, esta terminologia chrono básica começa com os três componentes do C++ 11, time point (ponto de tempo), duration (duração de tempo) e clock (relógio).\nA biblioteca chrono foi projetada para ser capaz de lidar com o fato de que temporizadores e relógios podem ser diferentes em sistemas diferentes e melhorar a precisão com o tempo. Para evitar a introdução de um novo tipo de tempo a cada 10 anos ou mais - como aconteceu com as bibliotecas de tempo POSIX, por exemplo - o objetivo era fornecer um conceito de precisão neutra, separando a duration (duração de tempo) e o time point (ponto de tempo) de específicos clocks (relógios). Como resultado, o núcleo da biblioteca chrono consiste nos seguintes tipos ou conceitos, que servem como mecanismos abstratos para especificar e lidar com pontos e durações de tempo.\nUm time point tem um ponto de partida, a chamada epoch (época), e uma duração de tempo adicional desde a epoch (época). Um exemplo típico é um ponto no tempo que representa “Meia-noite de Ano Novo de 2000”, que é descrito como “1.262.300.400 segundos desde 1º de janeiro de 1970” (este dia é a época do relógio do sistema UNIX e POSIX). A duration (duração de tempo) é a diferença entre dois pontos no tempo. O número de tiques do relógio define a duração do tempo. Um clock (relógio) tem um ponto inicial (epoch) e um tique para calcular o ponto no tempo atual. O relógio é o objeto que define a epoch (época) de um time point (ponto de tempo). Assim, relógios diferentes têm épocas diferentes. Em geral, as operações que lidam com vários pontos no tempo, como o processamento da duração/diferença entre dois pontos no tempo, exigem o uso da mesma época/relógio. Um relógio também fornece uma função conveniente para fornecer o ponto no tempo de agora (now). Em outras palavras, o time point (ponto de tempo) é definido como uma duração antes ou depois de uma época, que é definida por um relógio.\nPara mais informações leia o N2661 - A Foundation to Sleep On, esse documento fornece base e motivação para decisões importantes de projeto e é a fonte de muitas informações sobre a biblioteca .\nDuration (Duração de Tempo) A duração do tempo é um template de classe, std::chrono::duration consiste no tipo do tick Rep e na duração de um tick Period. Mais informações em time.syn.\ntemplate\u0026lt; class Rep, class Period = std::ratio\u0026lt;1\u0026gt; \u0026gt; class duration; O comprimento do tick é por padrão std::ratio\u0026lt;1\u0026gt;. std::ratio\u0026lt;1\u0026gt; significa um segundo e também pode ser escrito como std::ratio\u0026lt;1,1\u0026gt;. Portanto, std::ratio\u0026lt;60\u0026gt; é um minuto e std::ratio\u0026lt;1,1000\u0026gt; é um milissegundo. Quando Rep é um número de ponto flutuante, você pode usá-lo para armazenar frações de ticks de tempo.\nUm exemplo de durações personalizadas:\nstd::chrono::duration\u0026lt;int\u0026gt;vinteSegundos(20); std::chrono::duration\u0026lt;double,std::ratio\u0026lt;60\u0026gt;\u0026gt;meioMinuto(0.5); std::chrono::duration\u0026lt;long,std::ratio\u0026lt;1,1000\u0026gt;\u0026gt; umMilisegundo(1); No C++11 as durações mais importantes são definidas:\nusing nanoseconds = duration\u0026lt;signed integer type of at least 64 bits, nano\u0026gt;; using microseconds = duration\u0026lt;signed integer type of at least 55 bits, micro\u0026gt;; using milliseconds = duration\u0026lt;signed integer type of at least 45 bits, milli\u0026gt;; using seconds = duration\u0026lt;signed integer type of at least 35 bits\u0026gt;; using minutes = duration\u0026lt;signed integer type of at least 29 bits, ratio\u0026lt; 60\u0026gt;\u0026gt;; using hours = duration\u0026lt;signed integer type of at least 23 bits, ratio\u0026lt;3600\u0026gt;\u0026gt;; using days = duration\u0026lt;signed integer type of at least 25 bits, ratio_multiply\u0026lt;ratio\u0026lt;24\u0026gt;, hours::period\u0026gt;\u0026gt;; using weeks = duration\u0026lt;signed integer type of at least 22 bits, ratio_multiply\u0026lt;ratio\u0026lt;7\u0026gt;, days::period\u0026gt;\u0026gt;; using years = duration\u0026lt;signed integer type of at least 17 bits, ratio_multiply\u0026lt;ratio\u0026lt;146097, 400\u0026gt;, days::period\u0026gt;\u0026gt;; using months = duration\u0026lt;signed integer type of at least 20 bits, ratio_divide\u0026lt;years::period, ratio\u0026lt;12\u0026gt;\u0026gt;\u0026gt;; Com isso, podemos declarar as durações personalizadas do exemplo anterior, utilizando as definições padrões da biblioteca:\nstd::chrono::seconds vinteSegundos(20); std::chrono::hours umDia(24); std::chrono::milliseconds umMilisegundo(1); Com o seguinte exemplo, é possível verificar o tempo decorrido desde a epoch (época) com durações personalizadas:\n#include \u0026lt;chrono\u0026gt; #include \u0026lt;iostream\u0026gt; int main(){ std::cout \u0026lt;\u0026lt; std::fixed \u0026lt;\u0026lt; std::endl; std::cout \u0026lt;\u0026lt; \u0026#34;Tempo desde 1.1.1970:\\n\u0026#34; \u0026lt;\u0026lt; std::endl; auto timeNow= std::chrono::system_clock::now(); auto duration= timeNow.time_since_epoch(); std::cout \u0026lt;\u0026lt; duration.count() \u0026lt;\u0026lt; \u0026#34; nanoseconds \u0026#34; \u0026lt;\u0026lt; std::endl; typedef std::chrono::duration\u0026lt;long double,std::ratio\u0026lt;1,1000000\u0026gt;\u0026gt; MyMicroSecondTick; MyMicroSecondTick micro(duration); std::cout \u0026lt;\u0026lt; micro.count() \u0026lt;\u0026lt; \u0026#34; microseconds\u0026#34; \u0026lt;\u0026lt; std::endl; typedef std::chrono::duration\u0026lt;long double,std::ratio\u0026lt;1,1000\u0026gt;\u0026gt; MyMilliSecondTick; MyMilliSecondTick milli(duration); std::cout \u0026lt;\u0026lt; milli.count() \u0026lt;\u0026lt; \u0026#34; milliseconds\u0026#34; \u0026lt;\u0026lt; std::endl; typedef std::chrono::duration\u0026lt;long double\u0026gt; MySecondTick; MySecondTick sec(duration); std::cout \u0026lt;\u0026lt; sec.count() \u0026lt;\u0026lt; \u0026#34; seconds \u0026#34; \u0026lt;\u0026lt; std::endl; typedef std::chrono::duration\u0026lt;double, std::ratio\u0026lt;60\u0026gt;\u0026gt; MyMinuteTick; MyMinuteTick myMinute(duration); std::cout \u0026lt;\u0026lt; myMinute.count() \u0026lt;\u0026lt; \u0026#34; minutes\u0026#34; \u0026lt;\u0026lt; std::endl; typedef std::chrono::duration\u0026lt;double, std::ratio\u0026lt;60*60\u0026gt;\u0026gt; MyHourTick; MyHourTick myHour(duration); std::cout \u0026lt;\u0026lt; myHour.count() \u0026lt;\u0026lt; \u0026#34; hours\u0026#34; \u0026lt;\u0026lt; std::endl; typedef std::chrono::duration\u0026lt;double, std::ratio\u0026lt;60*60*24*365\u0026gt;\u0026gt; MyYearTick; MyYearTick myYear(duration); std::cout \u0026lt;\u0026lt; myYear.count() \u0026lt;\u0026lt; \u0026#34; years\u0026#34; \u0026lt;\u0026lt; std::endl; typedef std::chrono::duration\u0026lt;double, std::ratio\u0026lt;60*45\u0026gt;\u0026gt; MyLessonTick; MyLessonTick myLesson(duration); std::cout \u0026lt;\u0026lt; myLesson.count() \u0026lt;\u0026lt; \u0026#34; lessons\u0026#34; \u0026lt;\u0026lt; std::endl; std::cout \u0026lt;\u0026lt; std::endl; } Operações Aritméticas No time.duration.nonmember, os seguintes operadores podem ser usados:\ntemplate\u0026lt;class Rep1, class Period1, class Rep2, class Period2\u0026gt; constexpr common_type_t\u0026lt;duration\u0026lt;Rep1, Period1\u0026gt;, duration\u0026lt;Rep2, Period2\u0026gt;\u0026gt; operator+(const duration\u0026lt;Rep1, Period1\u0026gt;\u0026amp; lhs, const duration\u0026lt;Rep2, Period2\u0026gt;\u0026amp; rhs); Returns: CD(CD(lhs).count() + CD(rhs).count()). template\u0026lt;class Rep1, class Period1, class Rep2, class Period2\u0026gt; constexpr common_type_t\u0026lt;duration\u0026lt;Rep1, Period1\u0026gt;, duration\u0026lt;Rep2, Period2\u0026gt;\u0026gt; operator-(const duration\u0026lt;Rep1, Period1\u0026gt;\u0026amp; lhs, const duration\u0026lt;Rep2, Period2\u0026gt;\u0026amp; rhs); Returns: CD(CD(lhs).count() - CD(rhs).count()). template\u0026lt;class Rep1, class Period, class Rep2\u0026gt; constexpr duration\u0026lt;common_type_t\u0026lt;Rep1, Rep2\u0026gt;, Period\u0026gt; operator*(const duration\u0026lt;Rep1, Period\u0026gt;\u0026amp; d, const Rep2\u0026amp; s); Constraints: is_convertible_v\u0026lt;const Rep2\u0026amp;, common_type_t\u0026lt;Rep1, Rep2\u0026gt;\u0026gt; is true. Returns: CD(CD(d).count() * s). template\u0026lt;class Rep1, class Rep2, class Period\u0026gt; constexpr duration\u0026lt;common_type_t\u0026lt;Rep1, Rep2\u0026gt;, Period\u0026gt; operator*(const Rep1\u0026amp; s, const duration\u0026lt;Rep2, Period\u0026gt;\u0026amp; d); Constraints: is_convertible_v\u0026lt;const Rep1\u0026amp;, common_type_t\u0026lt;Rep1, Rep2\u0026gt;\u0026gt; is true. Returns: d * s. template\u0026lt;class Rep1, class Period, class Rep2\u0026gt; constexpr duration\u0026lt;common_type_t\u0026lt;Rep1, Rep2\u0026gt;, Period\u0026gt; operator/(const duration\u0026lt;Rep1, Period\u0026gt;\u0026amp; d, const Rep2\u0026amp; s); Constraints: is_convertible_v\u0026lt;const Rep2\u0026amp;, common_type_t\u0026lt;Rep1, Rep2\u0026gt;\u0026gt; is true and Rep2 is not a specialization of duration. Returns: CD(CD(d).count() / s). template\u0026lt;class Rep1, class Period1, class Rep2, class Period2\u0026gt; constexpr common_type_t\u0026lt;Rep1, Rep2\u0026gt; operator/(const duration\u0026lt;Rep1, Period1\u0026gt;\u0026amp; lhs, const duration\u0026lt;Rep2, Period2\u0026gt;\u0026amp; rhs); Let CD be common_type_t\u0026lt;duration\u0026lt;Rep1, Period1\u0026gt;, duration\u0026lt;Rep2, Period2\u0026gt;\u0026gt;. Returns: CD(lhs).count() / CD(rhs).count(). template\u0026lt;class Rep1, class Period, class Rep2\u0026gt; constexpr duration\u0026lt;common_type_t\u0026lt;Rep1, Rep2\u0026gt;, Period\u0026gt; operator%(const duration\u0026lt;Rep1, Period\u0026gt;\u0026amp; d, const Rep2\u0026amp; s); Constraints: is_convertible_v\u0026lt;const Rep2\u0026amp;, common_type_t\u0026lt;Rep1, Rep2\u0026gt;\u0026gt; is true and Rep2 is not a specialization of duration. Returns: CD(CD(d).count() % s). template\u0026lt;class Rep1, class Period1, class Rep2, class Period2\u0026gt; constexpr common_type_t\u0026lt;duration\u0026lt;Rep1, Period1\u0026gt;, duration\u0026lt;Rep2, Period2\u0026gt;\u0026gt; operator%(const duration\u0026lt;Rep1, Period1\u0026gt;\u0026amp; lhs, const duration\u0026lt;Rep2, Period2\u0026gt;\u0026amp; rhs); Returns: CD(CD(lhs).count() % CD(rhs).count()). Ou os operadores de comparação:\ntemplate\u0026lt;class Rep1, class Period1, class Rep2, class Period2\u0026gt; constexpr bool operator==(const duration\u0026lt;Rep1, Period1\u0026gt;\u0026amp; lhs, const duration\u0026lt;Rep2, Period2\u0026gt;\u0026amp; rhs); Returns: CT(lhs).count() == CT(rhs).count(). template\u0026lt;class Rep1, class Period1, class Rep2, class Period2\u0026gt; constexpr bool operator\u0026lt;(const duration\u0026lt;Rep1, Period1\u0026gt;\u0026amp; lhs, const duration\u0026lt;Rep2, Period2\u0026gt;\u0026amp; rhs); Returns: CT(lhs).count() \u0026lt; CT(rhs).count(). template\u0026lt;class Rep1, class Period1, class Rep2, class Period2\u0026gt; constexpr bool operator\u0026gt;(const duration\u0026lt;Rep1, Period1\u0026gt;\u0026amp; lhs, const duration\u0026lt;Rep2, Period2\u0026gt;\u0026amp; rhs); Returns: rhs \u0026lt; lhs. template\u0026lt;class Rep1, class Period1, class Rep2, class Period2\u0026gt; constexpr bool operator\u0026lt;=(const duration\u0026lt;Rep1, Period1\u0026gt;\u0026amp; lhs, const duration\u0026lt;Rep2, Period2\u0026gt;\u0026amp; rhs); Returns: !(rhs \u0026lt; lhs). template\u0026lt;class Rep1, class Period1, class Rep2, class Period2\u0026gt; constexpr bool operator\u0026gt;=(const duration\u0026lt;Rep1, Period1\u0026gt;\u0026amp; lhs, const duration\u0026lt;Rep2, Period2\u0026gt;\u0026amp; rhs); Returns: !(lhs \u0026lt; rhs). template\u0026lt;class Rep1, class Period1, class Rep2, class Period2\u0026gt; requires three_way_comparable\u0026lt;typename CT::rep\u0026gt; constexpr auto operator\u0026lt;=\u0026gt;(const duration\u0026lt;Rep1, Period1\u0026gt;\u0026amp; lhs, const duration\u0026lt;Rep2, Period2\u0026gt;\u0026amp; rhs); Returns: CT(lhs).count() \u0026lt;=\u0026gt; CT(rhs).count(). O ponto importante aqui é que o tipo de unidade de duas durações envolvidas em tal operação pode ser diferente. Devido a uma sobrecarga fornecida de common_type\u0026lt;\u0026gt; para durações, a duração resultante terá uma unidade que é o máximo divisor comum das unidades de ambos os operandos.\nEntão no seguinte exemplo, d1 - d2 retorna 41990 ticks e não 41.99 ticks. Se desejar um número com ponto flutuante, as definições padrões não podem ser utilizadas, pois declaram como int, mas uma personalizada com o tipo long double deve ser usada.\n#include \u0026lt;chrono\u0026gt; #include \u0026lt;iostream\u0026gt; typedef std::chrono::duration\u0026lt;long double\u0026gt; MySecondTick; int main(){ MySecondTick sec(0); std::chrono::seconds d1(42); // 42 seconds std::chrono::milliseconds d2(10); // 10 milliseconds sec = d1 - d2; std::cout \u0026lt;\u0026lt; (d1 - d2).count() \u0026lt;\u0026lt; std::endl; std::cout \u0026lt;\u0026lt; sec.count() \u0026lt;\u0026lt; std::endl; } Como vimos, conversões implícitas para um tipo de unidade mais preciso são sempre possíveis. No entanto, as conversões para um tipo de unidade mais grosseiro não o são, pois você pode perder informações. Por exemplo, ao converter um valor integral de 42.010 milissegundos em segundos, o valor integral resultante, 42, significa que a precisão de ter uma duração de 10 milissegundos em 42 segundos é perdida. Mas você ainda pode forçar explicitamente tal conversão com uma duração_cast. Por exemplo:\nstd::chrono::seconds sec(55); std::chrono::minutes m1 = sec; // ERRO std::chrono::minutes m2 = std::chrono::duration_cast\u0026lt;std::chrono::minutes\u0026gt;(sec); // OK Como outro exemplo, a conversão de uma duração com um tipo de ponto flutuante também requer uma conversão explícita para convertê-la em um tipo de duração integral:\nstd::chrono::duration\u0026lt;double,std::ratio\u0026lt;60\u0026gt;\u0026gt; halfMin(0.5); std::chrono::seconds s1 = halfMin; // ERROR std::chrono::seconds s2 = std::chrono::duration_cast\u0026lt;std::chrono::seconds\u0026gt;(halfMin); // OK Um exemplo típico é o código que segmenta uma duração em unidades diferentes. Por exemplo, o código a seguir segmenta uma duração de milissegundos nas horas, minutos, segundos e milissegundos correspondentes:\n#include \u0026lt;chrono\u0026gt; #include \u0026lt;iomanip\u0026gt; #include \u0026lt;iostream\u0026gt; using namespace std::chrono; using namespace std; milliseconds ms(7255042); int main(){ hours hh = duration_cast\u0026lt;hours\u0026gt;(ms); minutes mm = duration_cast\u0026lt;minutes\u0026gt;(ms % chrono::hours(1)); seconds ss = duration_cast\u0026lt;seconds\u0026gt;(ms % chrono::minutes(1)); milliseconds msec = duration_cast\u0026lt;milliseconds\u0026gt;(ms % chrono::seconds(1)); // and print durations and values: std::cout \u0026lt;\u0026lt; \u0026#34;raw: \u0026#34; \u0026lt;\u0026lt; hh.count() \u0026lt;\u0026lt; \u0026#34;::\u0026#34; \u0026lt;\u0026lt; mm.count() \u0026lt;\u0026lt; \u0026#34;::\u0026#34; \u0026lt;\u0026lt; ss.count() \u0026lt;\u0026lt; \u0026#34;::\u0026#34; \u0026lt;\u0026lt; msec.count() \u0026lt;\u0026lt; std::endl; std::cout \u0026lt;\u0026lt; \u0026#34; \u0026#34; \u0026lt;\u0026lt; setfill(\u0026#39;0\u0026#39;) \u0026lt;\u0026lt; setw(2) \u0026lt;\u0026lt; hh.count() \u0026lt;\u0026lt; \u0026#34;::\u0026#34; \u0026lt;\u0026lt; setw(2) \u0026lt;\u0026lt; mm.count() \u0026lt;\u0026lt; \u0026#34;::\u0026#34; \u0026lt;\u0026lt; setw(2) \u0026lt;\u0026lt; ss.count() \u0026lt;\u0026lt; \u0026#34;::\u0026#34; \u0026lt;\u0026lt; setw(3) \u0026lt;\u0026lt; msec.count() \u0026lt;\u0026lt; std::endl; } A classe também fornece três funções estáticas: zero(), que produz uma duração de 0 segundos, bem como min() e max(), que produzem o valor mínimo e máximo que uma duração pode ter.\nRelógios (Clocks) Um relógio consiste em um ponto de partida e um tique de tempo. Por exemplo, um relógio pode marcar em milissegundos desde a época do UNIX (1º de janeiro de 1970) ou em nanossegundos desde o início do programa. Além disso, um relógio fornece um tipo para qualquer ponto de tempo especificado de acordo com esse relógio.\nO C++ oferece três relógios, que podem ser vistos em system.clock:\nstd::system_clock representa pontos de tempo associados ao relógio de tempo real usual do sistema atual. Este relógio também fornece funções convenientes to_time_t() e from_time_t() para converter entre qualquer ponto no tempo e o tipo de hora do sistema C time_t, o que significa que você pode converter de e para horários do calendário. std::steady_clock dá a garantia de que nunca será ajustado. Assim, os valores dos pontos no tempo nunca diminuem à medida que o tempo físico avança e avançam a uma taxa constante em relação ao tempo real. std::high_resolution_clock representa um relógio com o período de tick mais curto possível no sistema atual. Observe que o padrão não fornece requisitos para a precisão, a epoch e o intervalo (pontos de tempo mínimo e máximo) desses relógios. Normalmente, o ponto de partida de std::chrono:system_clock é 1.1.1970, a chamada era UNIX. Para std::chrono::steady_clock, normalmente o tempo de inicialização do seu PC.\nPrecisão e Estabilidade É interessante saber quais relógios são estáveis ​​e qual precisão eles fornecem. Você obtém as respostas pelas propriedades dos relógios.\n#include \u0026lt;chrono\u0026gt; #include \u0026lt;iomanip\u0026gt; #include \u0026lt;iostream\u0026gt; using namespace std; template \u0026lt;typename C\u0026gt; void printClockData () { cout \u0026lt;\u0026lt; \u0026#34;- precisão: \u0026#34;; // if time unit is less or equal one millisecond typedef typename C::period P;// type of time unit if (ratio_less_equal\u0026lt;P,milli\u0026gt;::value) { // convert to and print as milliseconds typedef typename ratio_multiply\u0026lt;P,kilo\u0026gt;::type TT; cout \u0026lt;\u0026lt; fixed \u0026lt;\u0026lt; double(TT::num)/TT::den \u0026lt;\u0026lt; \u0026#34; milliseconds\u0026#34; \u0026lt;\u0026lt; endl; } else { // print as seconds cout \u0026lt;\u0026lt; fixed \u0026lt;\u0026lt; double(P::num)/P::den \u0026lt;\u0026lt; \u0026#34; seconds\u0026#34; \u0026lt;\u0026lt; endl; } cout \u0026lt;\u0026lt; \u0026#34;- estável: \u0026#34; \u0026lt;\u0026lt; boolalpha \u0026lt;\u0026lt; C::is_steady \u0026lt;\u0026lt; endl; } int main(){ std::cout \u0026lt;\u0026lt; \u0026#34;system_clock: \u0026#34; \u0026lt;\u0026lt; std::endl; printClockData\u0026lt;std::chrono::system_clock\u0026gt;(); std::cout \u0026lt;\u0026lt; \u0026#34;\\nhigh_resolution_clock: \u0026#34; \u0026lt;\u0026lt; std::endl; printClockData\u0026lt;std::chrono::high_resolution_clock\u0026gt;(); std::cout \u0026lt;\u0026lt; \u0026#34;\\nsteady_clock: \u0026#34; \u0026lt;\u0026lt; std::endl; printClockData\u0026lt;std::chrono::steady_clock\u0026gt;(); } Resultado:\nsystem_clock: - precisão: 0.000001 milliseconds - estável: false high_resolution_clock: - precisão: 0.000001 milliseconds - estável: false steady_clock: - precisão: 0.000001 milliseconds - estável: true Um relógio estável é um relógio monotônico, o que significa que o tempo só avança, nunca vai para trás, como um cronômetro. Ou seja, o valor retornado por uma chamada para now() é sempre menor ou igual ao valor retornado pela próxima chamada para now().\nIsso significa que você pode usar esse relógio para mediar o tempo antes de um evento, o tempo após um evento e subtraí-los confiavelmente para obter a duração do evento porque o relógio não será ajustado durante esse tempo.\nTime Point (Ponto de Tempo) Um ponto de tempo representa um ponto específico no tempo, associando uma duração positiva ou negativa a um determinado relógio.\nO template da classe time_point é a seguinte:\nnamespace std::chrono { template\u0026lt;class Clock, class Duration = typename Clock::duration\u0026gt; class time_point { public: using clock = Clock; using duration = Duration; using rep = typename duration::rep; using period = typename duration::period; private: duration d_; // exposition only public: // [time.point.cons], construct constexpr time_point(); // has value epoch constexpr explicit time_point(const duration\u0026amp; d); // same as time_point() + d template\u0026lt;class Duration2\u0026gt; constexpr time_point(const time_point\u0026lt;clock, Duration2\u0026gt;\u0026amp; t); // [time.point.observer], observer constexpr duration time_since_epoch() const; // [time.point.arithmetic], arithmetic constexpr time_point\u0026amp; operator++(); constexpr time_point operator++(int); constexpr time_point\u0026amp; operator--(); constexpr time_point operator--(int); constexpr time_point\u0026amp; operator+=(const duration\u0026amp; d); constexpr time_point\u0026amp; operator-=(const duration\u0026amp; d); // [time.point.special], special values static constexpr time_point min() noexcept; static constexpr time_point max() noexcept; }; } Note no trecho a seguir, que é necessário um relógio com duração ou de um relógio e uma duração.\nnamespace std { namespace chrono { template \u0026lt;typename Clock, typename Duration = typename Clock::duration\u0026gt; class time_point; } } O programa a seguir atribui esses pontos de tempo a tp e os imprime convertidos em uma notação de calendário:\n#include \u0026lt;chrono\u0026gt; #include \u0026lt;ctime\u0026gt; #include \u0026lt;string\u0026gt; #include \u0026lt;iostream\u0026gt; std::string asString (const std::chrono::system_clock::time_point\u0026amp; tp) { // convert to system time: std::time_t t = std::chrono::system_clock::to_time_t(tp); std::string ts = std::ctime(\u0026amp;t);// convert to calendar time ts.resize(ts.size()-1); // skip trailing newline return ts; } int main() { // print the epoch of this system clock: std::chrono::system_clock::time_point tp; std::cout \u0026lt;\u0026lt; \u0026#34;epoch: \u0026#34; \u0026lt;\u0026lt; asString(tp) \u0026lt;\u0026lt; std::endl; // print current time: tp = std::chrono::system_clock::now(); std::cout \u0026lt;\u0026lt; \u0026#34;now: \u0026#34; \u0026lt;\u0026lt; asString(tp) \u0026lt;\u0026lt; std::endl; // print minimum time of this system clock: tp = std::chrono::system_clock::time_point::min(); std::cout \u0026lt;\u0026lt; \u0026#34;min: \u0026#34; \u0026lt;\u0026lt; asString(tp) \u0026lt;\u0026lt; std::endl; // print maximum time of this system clock: tp = std::chrono::system_clock::time_point::max(); std::cout \u0026lt;\u0026lt; \u0026#34;max: \u0026#34; \u0026lt;\u0026lt; asString(tp) \u0026lt;\u0026lt; std::endl; } C++20 No C++20 os seguintes relógios foram adicionados:\nutc_clock tai_clock gps_clock file_clock local_t Os relógios std::chrono::steady_clock e std::chrono::file_clock têm uma epoch especificada na implementação. As epochs de std::chrono::system_clock, std::chrono::gps_clock, std::chrono::tai_clock e std::chrono::utc_clock começam às 00:00:00. std::chrono::file_clock é o relógio para entradas do sistema de arquivos.\nAlém disso, o C++ 11 oferece suporte a std::chrono::high_resolution_clock.\nclock_cast Com o std::chrono::clock_cast, você pode converter pontos de tempo entre os relógios com uma epoch. Estes são os relógios std::chrono::system_clock, std::chrono::utc_clock, std::chrono::gps_clock e std::chrono::tai_clock. Além disso, std::chrono::file_clock suporta conversão.\n#include \u0026lt;iostream\u0026gt; #include \u0026lt;sstream\u0026gt; #include \u0026lt;chrono\u0026gt; int main() { std::cout \u0026lt;\u0026lt; \u0026#39;\\n\u0026#39;; using namespace std::literals; auto timePoint = std::chrono::system_clock::now(); auto timePointUTC = std::chrono::clock_cast\u0026lt;std::chrono::utc_clock\u0026gt;(timePoint); std::cout \u0026lt;\u0026lt; \u0026#34;UTC_time: \u0026#34; \u0026lt;\u0026lt; std::format(\u0026#34;{:%F %X %Z}\u0026#34;, timePointUTC) \u0026lt;\u0026lt; \u0026#39;\\n\u0026#39;; auto timePointSys = std::chrono::clock_cast\u0026lt;std::chrono::system_clock\u0026gt;(timePoint); std::cout \u0026lt;\u0026lt; \u0026#34;sys_time: \u0026#34; \u0026lt;\u0026lt; std::format(\u0026#34;{:%F %X %Z}\u0026#34;, timePointSys) \u0026lt;\u0026lt; \u0026#39;\\n\u0026#39;; auto timePointFile = std::chrono::clock_cast\u0026lt;std::chrono::file_clock\u0026gt;(timePoint); std::cout \u0026lt;\u0026lt; \u0026#34;file_time: \u0026#34; \u0026lt;\u0026lt; std::format(\u0026#34;{:%F %X %Z}\u0026#34;, timePointFile) \u0026lt;\u0026lt; \u0026#39;\\n\u0026#39;; auto timePointGPS = std::chrono::clock_cast\u0026lt;std::chrono::gps_clock\u0026gt;(timePoint); std::cout \u0026lt;\u0026lt; \u0026#34;GPS_time: \u0026#34; \u0026lt;\u0026lt; std::format(\u0026#34;{:%F %X %Z}\u0026#34;, timePointGPS) \u0026lt;\u0026lt; \u0026#39;\\n\u0026#39;; auto timePointTAI = std::chrono::clock_cast\u0026lt;std::chrono::tai_clock\u0026gt;(timePoint); std::cout \u0026lt;\u0026lt; \u0026#34;TAI_time: \u0026#34; \u0026lt;\u0026lt; std::format(\u0026#34;{:%F %X %Z}\u0026#34;, timePointTAI) \u0026lt;\u0026lt; \u0026#39;\\n\u0026#39;; std::cout \u0026lt;\u0026lt; \u0026#39;\\n\u0026#39;; } std::chrono::parse A função std::chrono::parse analisa o objeto chrono de um fluxo IO. Nas linhas a seguir, std::chrono::clock_cast converte o timePoint no relógio especificado. A linha a seguir exibe o ponto no tempo, especificando sua data (%F), sua representação de hora local (%X) e sua abreviação de fuso horário (%Z).\nstd::istringstream{\u0026#34;2024-1-1 21:00:00\u0026#34;} \u0026gt;\u0026gt; std::chrono::parse(\u0026#34;%F %T\u0026#34;s, timePoint); Essa função ainda não foi implementada na maioria dos compiladores, e o gcc 14 ainda será lançado com o suporte a esta versão, o MSVC já possui suporte.\nReferência std::chrono Cpp Time library time_point duration Clock Era Linux / Epoch N2661 - A Foundation to Sleep On Clocks and Timers Relógios de Monotônicos clock_cast ","permalink":"https://danieltak.com.br/posts/estudo-tempo/","summary":"Introdução O tempo parece tão simples e trivial, mas ao mesmo tempo um conceito complexo e relativo. Desde muito tempo atrás o estudo sobre o tempo é realizado, na faculdade fiz um resumo do estudo de Aristóteles sobre o tempo, e até os dias de hoje as pessoas ainda debatem sobre o estudo dele e de muitos outros que vieram posteriormente.\nMas e no C++?\nNeste post explicarei um pouco sbre a biblioteca STL do C++ std::chrono, num post anterior expliquei sobre o tempo no Linux.","title":"Um Estudo sobre o Tempo"},{"content":"Introdução O word wrapping automático do Qt utilizando alguns flags funcionava corretamente na classe QTableWidget, porém outras propriedades não eram atendidas ao usar a classe padrão, para personalizar e contornar os delegates podem ser usados.\nPela minha experiência, o QTableWidget é muito limitado, para um widget tão complexo como a tabela, dificilmente você criará uma classe que atenderá à todos requisitos de tabelas de um projeto inteiro e eventualmente você precisará criar um delegate para implementar funcionalidades personalizadas.\nA solução foi criar um QStyledItemDelegate e sobrecarregar a função sizeHint calculando o tamanho usando o tamanho da fonte e a largura de cada coluna.\nFlags O enum do Modo de Word Wrap pode ser utilizado numa classe QLabel, em que as opções a seguir não funcionaram numa classe QtableWidget, você pode adicionar um QLabel ao cellWidget de uma tabela, mas não é a maneira mais recomendada.\nConstante Valor Descrição QTextOption::NoWrap 0 O texto não é quebrado automaticamente. QTextOption::WordWrap 1 O texto é quebrado nos limites das palavras. QTextOption::ManualWrap 2 O mesmo de QTextOption::NoWrap QTextOption::WrapAnywhere 3 O texto pode ser quebrado em qualquer ponto de uma linha, mesmo que ocorra no meio de uma palavra. QTextOption::WrapAtWordBoundaryOrAnywhere 4 Se possível, a quebra ocorre no limite de uma palavra; caso contrário, ocorrerá no ponto apropriado da linha, mesmo no meio de uma palavra. Classe Padrão Usando a função setWordWrap( bool on ) da classe QTableView, isso é possível e a função resizeRowsToContents() é usada para redimensionar as linhas.\nUm exemplo de código que exemplifica o problema pode ser visto no repositório do Github.\nNo código abaixo strings aleatórias são geradas num QTableWidget 5 x 5, com 8 palavras de contendo 5 letras, em cada célula da tabela.\n// Arquivo .cpp, os arquivos .h e .ui e o main podem ser vistos no exemplo de código completo #include \u0026#34;mainwindow.h\u0026#34; #include \u0026#34;./ui_mainwindow.h\u0026#34; #include \u0026lt;QHeaderView\u0026gt; #include \u0026lt;QTableWidget\u0026gt; #include \u0026lt;QRandomGenerator\u0026gt; MainWindow::MainWindow(QWidget *parent) : QMainWindow(parent) , ui(new Ui::MainWindow) { ui-\u0026gt;setupUi(this); setWindowTitle( \u0026#34;Word Wrap Function\u0026#34; ); QTableWidget *tableWidget = new QTableWidget (5, 5, ui-\u0026gt;centralwidget); tableWidget-\u0026gt;setGeometry( 0, 0, 640, 480 ); tableWidget-\u0026gt;setWordWrap(true); int width = 100; for( int row = 0; row \u0026lt; tableWidget-\u0026gt;rowCount(); row++ ) { for( int column = 0; column \u0026lt; tableWidget-\u0026gt;columnCount(); column++ ) { QString randomString = GetRandomString(); QTableWidgetItem* tableItem = tableWidget-\u0026gt;item( row, column ); if( tableItem == nullptr ) { tableItem = new QTableWidgetItem( randomString ); tableWidget-\u0026gt;setItem( row, column, tableItem ); } else { tableItem-\u0026gt;setText( randomString ); } tableWidget-\u0026gt;setColumnWidth(column, width); tableWidget-\u0026gt;horizontalHeader()-\u0026gt;resizeSection(column, width); } } tableWidget-\u0026gt;resizeRowsToContents(); } QString MainWindow::GetRandomString() const { const QString possibleCharacters(\u0026#34;ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789\u0026#34;); const int randomWordLength = 5; const int randomWordCount = 8; QString randomString; for( int wordCount = 0; wordCount \u0026lt; randomWordCount; ++wordCount ) { for( int wordLength = 0; wordLength \u0026lt; randomWordLength; ++wordLength ) { int index = QRandomGenerator::global()-\u0026gt;generate() % possibleCharacters.length(); QChar nextChar = possibleCharacters.at(index); randomString.append(nextChar); } randomString.append(\u0026#34; \u0026#34;); } return randomString; } MainWindow::~MainWindow() { delete ui; } Delegate Um delegate é um tipo que representa referências a métodos com uma lista de parâmetros e um tipo de retorno específicos. Ao instanciar um delegate, você pode associar sua instância a qualquer método com uma assinatura e um tipo de retorno compatíveis. Você pode invocar (ou chamar) o método por meio da instância delegate.\nOs delegates são usados para passar métodos como argumentos para outros métodos. Os manipuladores de eventos nada mais são do que métodos que são invocados por meio de delegates.\nQualquer método de qualquer classe ou estrutura acessível que corresponda ao tipo de delegate pode ser atribuído ao delegate. O método pode ser estático ou um método de instância. Essa flexibilidade significa que você pode alterar programaticamente as chamadas de método ou inserir novos códigos em classes existentes.\nEssa capacidade de se referir a um método como parâmetro torna os delegates ideais para definir métodos de retorno de chamada. Você pode escrever um método que compare dois objetos em seu aplicativo. Esse método pode ser usado em um delegate para um algoritmo de classificação. Como o código de comparação é separado da biblioteca, o método de classificação pode ser mais geral.\nQAbstractItemDelegate Um QAbstractItemDelegate fornece a interface e a funcionalidade comum para delegates na arquitetura de model/view. Os delegates exibem itens individuais em exibições e manipulam a edição de dados do modelo.\nA classe QAbstractItemDelegate é uma das classes de Model/View e faz parte da estrutura de model/view do Qt.\nPara renderizar um item de forma personalizada, você deve reimplementar paint() e sizeHint(). A classe QStyledItemDelegate fornece implementações padrão para essas funções.\nExemplo de Código Muitas vezes você precisa controlar as cores, as bordas, as margens, entre outros parâmetros da tabela. Para realizar essa personalização, as funções padrões do Qt não atendem aos requisitos.\nPortanto, é necessário criar classes de Delegate para os itens da tabela, ou seja, cada célula. Também para os itens de header, que não mostraremos nesse exemplo.\nAo modificar muito esse delegate, muitas vezes o wordp wrapping padrão não funcionará ou você necessita de margens personalizadas, o exemplo de delegate completo pode ser visto no repositório do Github.\nUm loop for é usado para cortar a cadeia de caracteres e verificar a largura da cadeia de caracteres cortada usando a fonte atual; se for maior que a largura da coluna, ela será cortada na posição do último espaço.\nPrimeiro a classe MyTableDelegate é criada:\n// header #ifndef MYTABLEDELEGATE_H #define MYTABLEDELEGATE_H #include \u0026lt;QPainter\u0026gt; #include \u0026lt;QStyledItemDelegate\u0026gt; class MyTableDelegate : public QStyledItemDelegate { Q_OBJECT public: explicit MyTableDelegate(QObject *parent = nullptr); void paint(QPainter *painter, const QStyleOptionViewItem \u0026amp;option, const QModelIndex \u0026amp;index) const; virtual QSize sizeHint(const QStyleOptionViewItem \u0026amp;option, const QModelIndex \u0026amp;index) const override; signals: }; #endif // MYTABLEDELEGATE_H // CPP #include \u0026#34;MyTableDelegate.h\u0026#34; #include \u0026lt;QApplication\u0026gt; #include \u0026lt;QFontMetrics\u0026gt; #include \u0026lt;QTableWidget\u0026gt; MyTableDelegate::MyTableDelegate(QObject *parent) : QStyledItemDelegate{parent} {} void MyTableDelegate::paint(QPainter *painter, const QStyleOptionViewItem \u0026amp;option, const QModelIndex \u0026amp;index) const { if (true == index.isValid()) { QStyleOptionViewItem itemOption(option); const QWidget *widget = option.widget; initStyleOption(\u0026amp;itemOption, index); QStyle *style = widget ? widget-\u0026gt;style() : QApplication::style(); style-\u0026gt;drawControl(QStyle::CE_ItemViewItem, \u0026amp;itemOption, painter, widget); } } QSize MyTableDelegate::sizeHint(const QStyleOptionViewItem \u0026amp;option, const QModelIndex \u0026amp;index) const { int height = 0; int width = 0; const int rowSpacing = 0; if (true == index.isValid()) { QString currentText = index.data().toString(); QTableWidget* parent = static_cast\u0026lt;QTableWidget*\u0026gt; (this-\u0026gt;parent()); if (nullptr != parent) { QFontMetrics metrics(parent-\u0026gt;font()); int fontHeight = parent-\u0026gt;font().pixelSize(); if (true == currentText.isEmpty()) { currentText = \u0026#34;H\u0026#34;; } QSize textSize = metrics.size(Qt::TextSingleLine, currentText); int textHeight = textSize.height(); int textWidth = textSize.width(); width = parent-\u0026gt;columnWidth(index.column()); if (true == parent-\u0026gt;wordWrap() \u0026amp;\u0026amp; ( width \u0026lt;= textWidth ) ) { QString qStrSliced; int iStartPos = 0; int iLineCount = 1; for( int iChar = 0; iChar \u0026lt;= currentText.size(); iChar++ ) { qStrSliced = currentText.sliced( iStartPos, iChar - iStartPos ); int iSlicedWidth = metrics.size( Qt::TextSingleLine, qStrSliced ).width(); if( iSlicedWidth \u0026gt;= width ) { int iLastSpacePos = iStartPos + qStrSliced.lastIndexOf( QChar::Space, -1 ); if ( iLastSpacePos \u0026gt; -1 ) { iStartPos = iLastSpacePos; iChar = iLastSpacePos; } else { iStartPos = iChar; } iLineCount++; } else if( true == qStrSliced.contains( QChar::LineFeed ) ) { iLineCount++; iStartPos = iChar; } else { // } } height = iLineCount * textHeight; } else { height = ( (currentText.count(\u0026#34;\\n\u0026#34;) + 1) * fontHeight) + 2; } height += rowSpacing; } } return QSize(width, height); } E uma classe adapter do QTableWidget é criada com nome MyTable:\n// header #ifndef MYTABLE_H #define MYTABLE_H #include \u0026lt;QTableWidget\u0026gt; class MyTable : public QTableWidget { Q_OBJECT public: explicit MyTable(QWidget *parent = nullptr); QString GetRandomString() const; void PopulateDummyTable(); signals: }; #endif // MYTABLE_H // CPP #include \u0026#34;MyTable.h\u0026#34; #include \u0026#34;MyTableDelegate.h\u0026#34; #include \u0026lt;QRandomGenerator\u0026gt; MyTable::MyTable(QWidget *parent) : QTableWidget{parent} { this-\u0026gt;setItemDelegate( new MyTableDelegate( this ) ); } QString MyTable::GetRandomString() const { const QString possibleCharacters(\u0026#34;ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789\u0026#34;); const int randomWordLength = 5; const int randomWordCount = 8; QString randomString; for( int wordCount = 0; wordCount \u0026lt; randomWordCount; ++wordCount ) { for( int wordLength = 0; wordLength \u0026lt; randomWordLength; ++wordLength ) { int index = QRandomGenerator::global()-\u0026gt;generate() % possibleCharacters.length(); QChar nextChar = possibleCharacters.at(index); randomString.append(nextChar); } randomString.append(\u0026#34; \u0026#34;); } return randomString; } void MyTable::PopulateDummyTable() { for( int row = 0; row \u0026lt; this-\u0026gt;rowCount(); row++ ) { for( int column = 0; column \u0026lt; this-\u0026gt;columnCount(); column++ ) { QString randomString = GetRandomString(); QTableWidgetItem* tableItem = this-\u0026gt;item( row, column ); if( tableItem == nullptr ) { tableItem = new QTableWidgetItem( randomString ); this-\u0026gt;setItem( row, column, tableItem ); } else { tableItem-\u0026gt;setText( randomString ); } } this-\u0026gt;setRowHeight( row, this-\u0026gt;sizeHintForRow(row) ); } } A Main Window:\n#include \u0026#34;mainwindow.h\u0026#34; #include \u0026#34;./ui_mainwindow.h\u0026#34; #include \u0026#34;MyTable.h\u0026#34; #include \u0026lt;QHeaderView\u0026gt; MainWindow::MainWindow(QWidget *parent) : QMainWindow(parent) , ui(new Ui::MainWindow) { ui-\u0026gt;setupUi(this); setWindowTitle( \u0026#34;Word Wrap Delegate\u0026#34; ); MyTable *tableWidget = new MyTable ( ui-\u0026gt;centralwidget ); tableWidget-\u0026gt;setRowCount( 5 ); tableWidget-\u0026gt;setColumnCount( 5 ); tableWidget-\u0026gt;setGeometry( 0, 0, 640, 480 ); const int width = 100; for( int column = 0; column \u0026lt; tableWidget-\u0026gt;columnCount(); column++ ) { tableWidget-\u0026gt;setColumnWidth(column, width); tableWidget-\u0026gt;horizontalHeader()-\u0026gt;resizeSection(column, width); } tableWidget-\u0026gt;PopulateDummyTable(); } MainWindow::~MainWindow() { delete ui; } Resultado O resultado pode ser visto na figura abaixo, em que na esquerda a função do Word Wrap foi utilizada e na direita os delegates.\nCom os delegates o espaçamento da margem ficou mais personalizado e menor, pois a variável rowspacing é igual a zero.\nReferências Wrap Mode Enum QTableWidget Exemplo QTableWidget Exemplo Delegate QAbstractItemDelegate ","permalink":"https://danieltak.com.br/posts/table-widget-word-wrap/","summary":"Introdução O word wrapping automático do Qt utilizando alguns flags funcionava corretamente na classe QTableWidget, porém outras propriedades não eram atendidas ao usar a classe padrão, para personalizar e contornar os delegates podem ser usados.\nPela minha experiência, o QTableWidget é muito limitado, para um widget tão complexo como a tabela, dificilmente você criará uma classe que atenderá à todos requisitos de tabelas de um projeto inteiro e eventualmente você precisará criar um delegate para implementar funcionalidades personalizadas.","title":"Quebra de Texto num Widget de Table usando QWidget"},{"content":"Geodésia Segundo a Wiki:\nO estudo de geodésias em um elipsoide surgiu em conexão com a geodésia, especificamente com a solução de redes de triangulação. A figura da Terra é bem aproximada por um elipsoide oblato, uma esfera ligeiramente achatada. Uma geodésia é o caminho mais curto entre dois pontos em uma superfície curva, análogo a uma linha reta em uma superfície plana. A solução de uma rede de triangulação em um elipsoide é, portanto, um conjunto de exercícios de trigonometria esferoidal (Euler, 1755).\nSe a Terra for tratada como uma esfera, as geodésias são grandes círculos (todos fechados) e os problemas se reduzem aos da trigonometria esférica. Entretanto, Newton (1687) mostrou que o efeito da rotação da Terra faz com que ela se assemelhe a um elipsoide ligeiramente oblato: nesse caso, o equador e os meridianos são as únicas geodésias simples e fechadas. Além disso, o caminho mais curto entre dois pontos no equador não necessariamente passa pelo equador. Por fim, se o elipsoide for ainda mais perturbado para se tornar um elipsoide triaxial (com três semieixos distintos), apenas três geodésias serão fechadas.\nExistem dois algoritmos mais conhecidos a Haversine e Vincenty.\nHaversine vs Vincenty Haversine formula (Great Circle Distance):\n$$ D(x, y) = 2\\arcsin[\\sqrt{\\sin^2( \\frac{(x1 - y1)}{2}) + \\cos(x1)\\cos(y1)\\sin^2( \\frac{(x2 - y2)}{2})}] $$\nUsado por aproximar a terra com uma esfera e perder precisão, mas ser mais rápido e funcionar bem para pequenas distâncias.\nVincenty\u0026rsquo;s formulae é mais preciso e é um método iterativo, que pode ocorrer erros com problemas de antipodais próximos, mas no caso de não necessitar distâncias entre Brasil e Japão, então o problema de antípode não interfere.\nPor ser iterativo, pode ser mais lento, mas para distâncias num mesmo país não será um problema.\nHaversine e Vincenty são dois algoritmos para resolver problemas diferentes. O Haversine calcula a distância do grande círculo em uma esfera, enquanto o Vincenty calcula a distância mais curta (geodésica) na superfície de um elipsoide de revolução. Portanto, a resposta à sua pergunta pode ser dividida em duas partes:\nVocê deseja calcular a distância em uma esfera em um elipsoide? Qual é a precisão de Haversine ou Vincenty no cálculo do problema em questão? Para aplicações terrestres, um elipsoide de revolução é uma aproximação razoável do \u0026ldquo;nível médio do mar\u0026rdquo;; o erro é de ± 100 m. O achatamento desse elipsoide é pequeno, cerca de 1/300, e, portanto, pode ser aproximado por uma esfera (de igual volume, por exemplo).\nAs distâncias do grande círculo diferem das distâncias geodésicas em até 0,5%. Em algumas aplicações, como, por exemplo, qual é a distância do Cabo ao Cairo, esse erro pode ser desprezado. Em outras aplicações, por exemplo, a determinação de fronteiras marítimas, esse erro é muito grande (é de 5 m em uma distância de 1 km). Em geral, é mais seguro usar a distância geodésica.\nSe estiver interessado na distância percorrida (de carro, barco ou avião), há muitas restrições no caminho percorrido e nem o grande círculo nem a distância geodésica, que medem o comprimento dos caminhos mais curtos em uma superfície ideal, seriam apropriados. Mas para estimativas de preço ou filtrar um mapa pelo raio do alvo, esses algoritmos se tornam interessantes.\nPara distâncias e trajetos mais precisos, a API de mapa será muito mais precisa e com informações mais relevantes. As mais famosas são Google Maps, Mapbox e OpenStreetMaps.\nCódigo em PHP Um exemplo de código de Haversine formula em PHP pode ser visto a seguir:\n\u0026lt;?php class Localizador{ public function __construct($latA,$longA,$latB,$longB ){ if(is_float($longA) \u0026amp;\u0026amp; is_float($latA) \u0026amp;\u0026amp; is_float($longB) \u0026amp;\u0026amp; is_float($latB)){ $this-\u0026gt;longA = $longA; $this-\u0026gt;latA = $latA; $this-\u0026gt;longB = $longB; $this-\u0026gt;latB = $latB; } } /** * Calculates the great-circle distance between two points, with * the Vincenty formula. * @param float $latitudeDe Latitude of start point in [deg decimal] * @param float $longitudeDe Longitude of start point in [deg decimal] * @param float $latitudePara Latitude of target point in [deg decimal] * @param float $longitudePara Longitude of target point in [deg decimal] * @param float $raioTerra Mean earth radius in [m] * @return float Distance between points in [m] */ public static function calcDist($latitudeDe, $longitudeDe, $latitudePara, $longitudePara, $raioTerra = 6371000){ // converte de graus para radianos $latDe = deg2rad($latitudeDe); $lonDe = deg2rad($longitudeDe); $latPara = deg2rad($latitudePara); $lonPara = deg2rad($longitudePara); $lonDelta = $lonPara - $lonDe; $a = pow(cos($latPara) * sin($lonDelta), 2) + pow(cos($latDe) * sin($latPara) - sin($latDe) * cos($latPara) * cos($lonDelta), 2); $b = sin($latDe) * sin($latPara) + cos($latDe) * cos($latPara) * cos($lonDelta); $angulo = atan2(sqrt($a), $b); return $angulo * $raioTerra; } } Para um teste, vamos verificar a distância entre dois pontos de (42.167803, -87.921589) para (42.144516, -87.910345):\n\u0026lt;?php $raioTerra = 6371000; $latitudeDe = 42.167803; $longitudeDe = -87.921589; $latitudePara = 42.144516; $longitudePara = -87.910345; $latDe = deg2rad($latitudeDe); $lonDe = deg2rad($longitudeDe); $latPara = deg2rad($latitudePara); $lonPara = deg2rad($longitudePara); $lonDelta = $lonPara - $lonDe; $a = pow(cos($latPara) * sin($lonDelta), 2) + pow(cos($latDe) * sin($latPara) - sin($latDe) * cos($latPara) * cos($lonDelta), 2); $b = sin($latDe) * sin($latPara) + cos($latDe) * cos($latPara) * cos($lonDelta); $angulo = atan2(sqrt($a), $b); $distancia = $angulo * $raioTerra; echo $distancia; ?\u0026gt; O resultado é:\n2750.2778474759 m\nNo Google Maps essa distância é de 2,8 km, sendo bem preciso.\nOutro exemplo do GeekForGeeks pode ser visto no código a seguir, em que o resultado bateu com o da referência:\n\u0026lt;?php $raioTerra = 6371000; $latitudeDe = 53.32055555555556; $longitudeDe = -1.7297222222222221; $latitudePara = 53.31861111111111; $longitudePara = -1.6997222222222223; $latDe = deg2rad($latitudeDe); $lonDe = deg2rad($longitudeDe); $latPara = deg2rad($latitudePara); $lonPara = deg2rad($longitudePara); $lonDelta = $lonPara - $lonDe; $a = pow(cos($latPara) * sin($lonDelta), 2) + pow(cos($latDe) * sin($latPara) - sin($latDe) * cos($latPara) * cos($lonDelta), 2); $b = sin($latDe) * sin($latPara) + cos($latDe) * cos($latPara) * cos($lonDelta); $angulo = atan2(sqrt($a), $b); $distancia = $angulo * $raioTerra; echo $distancia; ?\u0026gt; Referência Estudo de geodésias em um elipsoide Calculate distance, bearing and more between Latitude/Longitude points Vincenty solutions of geodesics on the ellipsoid Is the Haversine Formula or the Vincenty\u0026rsquo;s Formula better for calculating distance? Fórmula de haversine Vincenty\u0026rsquo;s formulae Increase Accuracy of Mapbox GL Geocoder Program for distance between two points on earth ","permalink":"https://danieltak.com.br/posts/distancia-dois-pontos-esfera/","summary":"Geodésia Segundo a Wiki:\nO estudo de geodésias em um elipsoide surgiu em conexão com a geodésia, especificamente com a solução de redes de triangulação. A figura da Terra é bem aproximada por um elipsoide oblato, uma esfera ligeiramente achatada. Uma geodésia é o caminho mais curto entre dois pontos em uma superfície curva, análogo a uma linha reta em uma superfície plana. A solução de uma rede de triangulação em um elipsoide é, portanto, um conjunto de exercícios de trigonometria esferoidal (Euler, 1755).","title":"Distância entre Dois Pontos de uma Esfera"},{"content":"Introdução No QML muitas vezes é necessário o acesso global à variáveis e funções, isso pode ser alcançado com um padrão de projeto Singleton.\nUm exemplo é a configuração global de um software, que além de ser acessado por qualquer janela, deve também salvar os dados de configuração em algum arquivo.\nO Singleton é um padrão de projeto criacional que permite a você garantir que uma classe tenha apenas uma instância, enquanto provê um ponto de acesso global para essa instância.\nSingleton O Refactoring.guru diz o seguinte:\nO padrão Singleton resolve dois problemas de uma só vez, violando o princípio de responsabilidade única:\nGarantir que uma classe tenha apenas uma única instância. Por que alguém iria querer controlar quantas instâncias uma classe tem? A razão mais comum para isso é para controlar o acesso a algum recurso compartilhado, por exemplo, uma base de dados ou um arquivo. Funciona assim: imagine que você criou um objeto, mas depois de um tempo você decidiu criar um novo. Ao invés de receber um objeto fresco, você obterá um que já foi criado.\nObserve que esse comportamento é impossível implementar com um construtor regular uma vez que uma chamada do construtor deve sempre retornar um novo objeto por design.\nFornece um ponto de acesso global para aquela instância. Se lembra daquelas variáveis globais que você (tá bom, eu) usou para guardar alguns objetos essenciais? Embora sejam muito úteis, elas também são muito inseguras uma vez que qualquer código pode potencialmente sobrescrever os conteúdos daquelas variáveis e quebrar a aplicação. Assim como uma variável global, o padrão Singleton permite que você acesse algum objeto de qualquer lugar no programa. Contudo, ele também protege aquela instância de ser sobrescrita por outro código.\nHá outro lado para esse problema: você não quer que o código que resolve o problema #1 fique espalhado por todo seu programa. É muito melhor tê-lo dentro de uma classe, especialmente se o resto do seu código já depende dela.\nCMake Muitos tutoriais antigos dizem para alterar o qmldir, mas no Qt6, o qmldir é gerado automaticamente, portanto, uma das maneiras é declarar que uma classe QML é singleton no CMake.\nset_source_files_properties(MyTheme.qml PROPERTIES QT_QML_SINGLETON_TYPE TRUE)\nE no cabeçalho da classe pragma Singleton\nUm Example Singleton1 pode ser visto no github, em que a classe QML MySingleton é criada com as seguintes propriedades:\nproperty string helloWorld: property string loremIpsum: property bool changeTextColor: E o seguinte código é usado para um teste numa janela:\nimport QtQuick import QtQuick.Controls Window { width: 640 height: 480 visible: true color: \u0026#34;#888888\u0026#34; title: qsTr( MySingleton.helloWorld ) Text{ id: myText width: parent.width font.pixelSize: 22 color: MySingleton.changeTextColor ? \u0026#34;red\u0026#34; : \u0026#34;blue\u0026#34; text: MySingleton.loremIpsum wrapMode: Text.WrapAnywhere } Button{ id: myButton anchors.top: myText.bottom width: parent.width / 4 text: \u0026#34;Trocar Cor\u0026#34; onClicked: { MySingleton.changeTextColor = !MySingleton.changeTextColor; } } } Classe C++ Muitas vezes o QML é limitado e é necessário criar classes em C++.\nPara criar um singleton numa classe C++, vamos criar um header chamado singleton.h, com templates e thread-safe. Utilizando como base o projeto do FluentUI.\nPara ser thread-safe, a classe QMutexLocker foi utilizada, mas um lock_guard também poderia ser utilizado.\nO exemplo completo pode ser visto no repositório Example Singleton2.\nLembrando se for utilizar o lock_guard, veja a guideline CP44\nQMutexLocker O QMutexLocker deve ser criado em uma função na qual um QMutex precisa ser bloqueado. O mutex é bloqueado quando o QMutexLocker é criado. Você pode desbloquear e bloquear novamente o mutex com unlock() e relock(). Se estiver bloqueado, o mutex será desbloqueado quando o QMutexLocker for destruído.\nPor exemplo, a seguinte função bloqueia e desbloqueia um QMutex, tendo que garantir que um Deadlock não ocorra.\nint complexFunction(int flag) { mutex.lock(); int retVal = 0; switch (flag) { case 0: case 1: retVal = moreComplexFunction(flag); break; case 2: { int status = anotherFunction(); if (status \u0026lt; 0) { mutex.unlock(); return -2; } retVal = status + flag; } break; default: if (flag \u0026gt; 10) { mutex.unlock(); return -1; } break; } mutex.unlock(); return retVal; } O uso do QMutexLocker simplifica muito o código e o torna mais legível:\nint complexFunction(int flag) { QMutexLocker locker(\u0026amp;mutex); int retVal = 0; switch (flag) { case 0: case 1: return moreComplexFunction(flag); case 2: { int status = anotherFunction(); if (status \u0026lt; 0) return -2; retVal = status + flag; } break; default: if (flag \u0026gt; 10) return -1; break; } return retVal; } Opinião: Eu pessoalmente prefiro usar as funções do STL, como o lock_guard. Mas vou manter o uso do QMutexLocker para fins educacionais, pois há bastante material sobre o lock_guard na internet.\nEstanciador Singleton A classe singleton.h pode ser criada com o #define SINGLETON(Class) para construir a classe com o template definido no header.\n#ifndef SINGLETON_H #define SINGLETON_H #include \u0026lt;QMutex\u0026gt; template \u0026lt;typename T\u0026gt; class Singleton { public: static T* getInstance(); private: Q_DISABLE_COPY_MOVE(Singleton) }; template \u0026lt;typename T\u0026gt; T* Singleton\u0026lt;T\u0026gt;::getInstance() { static QMutex mutex; QMutexLocker locker(\u0026amp;mutex); static T* instance = nullptr; if (instance == nullptr) { instance = new T(); } return instance; } #define SINGLETON(Class) \\ private: \\ friend class Singleton\u0026lt;Class\u0026gt;; \\ public: \\ static Class* getInstance() { \\ return Singleton\u0026lt;Class\u0026gt;::getInstance(); \\ } #define HIDE_CONSTRUCTOR(Class) \\ private: \\ Class() = default; \\ Class(const Class\u0026amp; other) = delete; \\ Q_DISABLE_COPY_MOVE(Class); #endif // SINGLETON_H Classe Singleton Criamos a classe MySingleton, adicionando as variáveis com a Macro Qt Q_PROPERTY, QML_NAMED_ELEMENT, QML_SINGLETON e o instanciando o singleton com o #define SINGLETON(Class).\nO header fica da seguinte maneira:\n#ifndef MYSINGLETON_H #define MYSINGLETON_H #include \u0026lt;QObject\u0026gt; #include \u0026lt;QString\u0026gt; #include \u0026lt;QtQml/qqml.h\u0026gt; #include \u0026#34;singleton.h\u0026#34; class MySingleton : public QObject { Q_OBJECT Q_PROPERTY( QString helloWorld READ helloWorld WRITE helloWorld NOTIFY helloWorldChanged ) Q_PROPERTY( QString loremIpsum READ loremIpsum WRITE loremIpsum NOTIFY loremIpsumChanged ) Q_PROPERTY( bool changeTextColor READ changeTextColor WRITE changeTextColor NOTIFY textColorChanged ) QML_NAMED_ELEMENT(MySingleton) QML_SINGLETON protected: QString helloWorld() const; void helloWorld( QString newString ); QString loremIpsum() const; void loremIpsum( QString newString ); bool changeTextColor() const; void changeTextColor( bool newValue ); private: explicit MySingleton(QObject *parent = nullptr); public: SINGLETON(MySingleton) static MySingleton *create(QQmlEngine *qmlEngine, QJSEngine *jsEngine){return getInstance();} public: QString m_helloWorld; QString m_loremIpsum; bool m_changeTextColor; signals: void helloWorldChanged(); void loremIpsumChanged(); void textColorChanged(); }; #endif // MYSINGLETON_H No cpp inicializamos os membros da classe no construtor e criamos as funções com overload de READ e WRITE da do Q_PROPERTY, emitindo o sinal de \u0026ldquo;changed\u0026rdquo; que será notificado pelo sistema de eventos do Qt.\n#include \u0026#34;MySingleton.h\u0026#34; MySingleton::MySingleton(QObject *parent) : QObject{parent}, m_helloWorld(\u0026#34;Hello World!\u0026#34;), m_loremIpsum(\u0026#34;Lorem ipsum dolor sit amet, consectetur adipiscing elit. Donec quis convallis sapien. In pharetra, urna quis ornare bibendum, neque lacus varius tortor, sed pretium nunc ante a metus. Fusce finibus semper urna, quis pharetra odio tincidunt feugiat. Quisque fermentum elementum velit auctor sagittis. Aenean ac aliquam diam. Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nullam euismod iaculis massa, sed pretium eros cursus a. Aenean eu tortor sed augue maximus pharetra. Aliquam erat volutpat. Pellentesque malesuada nibh quam, eu consequat elit pretium vel.\u0026#34;), m_changeTextColor(false) { } QString MySingleton::helloWorld() const { return m_helloWorld; } void MySingleton::helloWorld(QString newString) { m_helloWorld = newString; emit helloWorldChanged(); } QString MySingleton::loremIpsum() const { return m_loremIpsum; } void MySingleton::loremIpsum(QString newString) { m_loremIpsum = newString; emit loremIpsumChanged(); } bool MySingleton::changeTextColor() const { return m_changeTextColor; } void MySingleton::changeTextColor(bool newValue) { m_changeTextColor = newValue; emit textColorChanged(); } Referência Singleton Design Pattern Exemplo Singleton1 Exemplo Singleton2 FluentUI QMutexLocker lock_guard CP.44: Remember to name your lock_guards and unique_locks Q_PROPERTY ","permalink":"https://danieltak.com.br/posts/qml-singleton/","summary":"Introdução No QML muitas vezes é necessário o acesso global à variáveis e funções, isso pode ser alcançado com um padrão de projeto Singleton.\nUm exemplo é a configuração global de um software, que além de ser acessado por qualquer janela, deve também salvar os dados de configuração em algum arquivo.\nO Singleton é um padrão de projeto criacional que permite a você garantir que uma classe tenha apenas uma instância, enquanto provê um ponto de acesso global para essa instância.","title":"QML Singleton"},{"content":"Introdução No POSIX o time.h pode ser utilizado ou a chamada de sistema time().\nEste post falará brevemente com alguns snippets sobre como alterar a data e hora no Linux POSIX.\nEstruturas de Tempo O time_t é o tipo aritmético capaz de representar tempos. Embora não esteja definido, esse é quase sempre um valor integral (mas pode ser floating point) que contém o número de segundos (sem contar os segundos bissextos) desde 00:00, 1º de janeiro de 1970 UTC, correspondente à Era POSIX.\nJá o tm é uma estrutura que contém uma data e hora de calendário dividida em seus componentes. A estrutura contém nove membros do tipo int (em qualquer ordem), que são:\nMembro Tipo Descrição Intervalo tm_sec int segundos após o minuto 0-60 tm_min int minutos após a hora 0-59 tm_hour int horas desde meia noite 0-23 tm_mday int dia do mês 1-31 tm_mon int meses desde Janeiro 0-11 tm_year int anos desde 1900 tm_wday int dias da semana desde Domingo 0-6 tm_yday int dias desde 1 de Janeiro 0-365 tm_isdst int flag de Horário de Verão O timespec é uma estrutura que contém um intervalo dividido em segundos e nanossegundos.\nO cabeçalho \u0026lt;sys/time.h\u0026gt; define a estrutura timeval que inclui pelo menos os seguintes membros:\ntime_t tv_sec seconds\rsuseconds_t tv_usec microseconds O cabeçalho \u0026lt;sys/time.h\u0026gt; define a estrutura itimerval que inclui pelo menos os seguintes membros:\nstruct timeval it_interval timer interval\rstruct timeval it_value current value O cabeçalho \u0026lt;sys/time.h\u0026gt; define a estrutura timezone que inclui pelo menos os seguintes membros:\nint tz_minuteswest; /* minutes west of Greenwich */\rint tz_dsttime; /* type of DST correction */ Obter a data e hora Você pode verificar usando o comando date no terminal do Linux, ele devolve a data e hora do sistema operacional.\nPara obter a hora usando o cabeçalho time.h, use a função gettimeofday e NULL para o fuso horário, ou use também a função time().\nA função gettimeofday() obtém a hora atual, expressa em segundos e microssegundos desde 00:00 Coordinated Universal Time (UTC), 1º de janeiro de 1970, e a armazena na estrutura timeval.\n#include \u0026lt;sys/time.h\u0026gt; struct timeval tTime; gettimeofday( \u0026amp;tTime, NULL); std::cout \u0026lt;\u0026lt; tTime.tv_sec \u0026lt;\u0026lt; std::endl; std::cout \u0026lt;\u0026lt; tTime.tv_usec \u0026lt;\u0026lt; std::endl; Definir a data e hora Para definir a hora usando o cabeçalho time.h, use a função settimeofday e o argumento NULL para o fuso horário.\nA função settimeofday() é similar à gettimeofday(), porém define a hora ao invés de obter.\n#include \u0026lt;sys/time.h\u0026gt; struct timeval tnewTime; int iReturn; tnewTime.tv_sec = 1691067482; // O tempo em segundos é calculado a partir de alguma classe criada; aqui estamos assumindo um valor de tempo constante. tnewTime.tv_usec = 0; iReturn = settimeofday( \u0026amp; tnewTime , NULL ); if ( iReturn == 0 ) { system(\u0026#34;hwclock --systohc\u0026#34;); } Para atualizar a hora do rtc no hardware, use o hwclock -w ou hwclock --systohc. Assim, o aplicativo funciona no espaço do usuário e atualiza a hora do sistema e, posteriormente, é necessária uma sincronização para atualizar o relógio do hardware.\nOu seja, o horário do sistema operacional foi definido com a função settimeofday() e depois o horário do hardware é atualizado com o horário do sistema com a chamada de sistema hwclock --systohc.\nPara verificar a hora do rtc no hardware, use o comando hwclock.\nSe você quiser alterar o relógio do hardware e atualizar a hora do sistema, use o comando hwclock -s ou hwclock --hctosys.\nÉ necessário atualizar a data e hora do hardware, pois ao iniciar o dispositivo, o sistema operacional obtém a data e hora do hardware. Caso não seja atualizado, ele sempre iniciará com as definições antigas.\nOpinião Use sempre as opções que descrevem a intenção do argumento, por exemplo, utilizar o hwclock --systohc, pois você está realizando a operação do sys para o hc (hardware clock). Já com hwclock -w, o argumento -w pode significar uma infinidade de coisas.\nNo Linux as opções das chamadas de sistema geralmente fornecem duas possibilidades, como no caso do hwclock de -w e --systohc, sempre opte pela semântica.\nReferência time.h(0P) time time_t tm timespec Posix Time date gettimeofday hwclock ","permalink":"https://danieltak.com.br/posts/linux-time/","summary":"Introdução No POSIX o time.h pode ser utilizado ou a chamada de sistema time().\nEste post falará brevemente com alguns snippets sobre como alterar a data e hora no Linux POSIX.\nEstruturas de Tempo O time_t é o tipo aritmético capaz de representar tempos. Embora não esteja definido, esse é quase sempre um valor integral (mas pode ser floating point) que contém o número de segundos (sem contar os segundos bissextos) desde 00:00, 1º de janeiro de 1970 UTC, correspondente à Era POSIX.","title":"Tempo no Linux"},{"content":"Introdução Este post explicará como fazer um snippet de uma aplicação no Qt, utilizando o C++ e a biblioteca do X11. O sistema operacional Linux deve utilizar o protocolo X11.\nMe deparei com este problema, pois o sistema embarcado não possui barra de tarefas, portanto, não é possível minimizar e maximizar da maneira convencional e alguns hotkeys bindings foram utilizados para maximizar e minimizar a aplicação principal.\nO que é o X11? Segundo a wiki:\nX Window System, X-Window, X11 ou simplesmente X é um software de sistema e um protocolo que fornece uma base para interfaces gráficas de usuário (com o conceito de janelas) e funcionalidade rica de dispositivos de entrada para redes de computadores. Ele cria uma camada de abstração de hardware onde o software é escrito para usar um conjunto generalizado de comandos, permitindo a independência de dispositivo e reutilização de programas em qualquer computador que implemente o X. X-Window é o toolkit e protocolo padrão para GUI nos sistemas Unix e assemelhados, como o Linux, mas existem versões para outros sistemas operacionais, como o Microsoft Windows e o Mac OS, por exemplo.\nAtualmente este projeto é mantido pela X.Org Foundation, mas um protocolo novo chamado Wayland está ganhando espaço e a maioria das novas distribuições Linux utilizam este protocolo ou um híbrido XWayland. Os softwares ainda estão se adaptando a esse novo protocolo e um caminho longo para a portabilidade completa, contudo, o Wayland é o protocolo do futuro e o X11 será descontinuado em algum momento.\nMas ainda a maior parte dos softwares ou sistemas operacionais ainda utilizam o X11, portanto, é bom entender um pouco dos dois, pois estamos num momento de transição.\nAplicação Qt Às vezes, as funções padrão do Qt não tratam adequadamente a janela, portanto, as bibliotecas do X11 são necessárias para lidar com isso.\nPara adicionar ao projeto, a seguinte configuração deve ser adicionada no CMakeLists:\nfind_package(X11 REQUIRED)\rinclude_directories(${X11_INCLUDE_DIR})\rlink_libraries(${X11_LIBRARIES}) Includes:\n#include \u0026lt;X11/Xlib.h\u0026gt; Use XIconifyWindow() para minimizar a janela, no Qt6 o código a seguir:\n// If there is only one Window MainWindow * win = (MainWindow *) qApp::activeWindow(); Display *display = nullptr; xcb_connection_t *connection = nullptr; bool bIsPlatformX11 = false; if (auto *x11Application = qGuiApp-\u0026gt;nativeInterface\u0026lt;QNativeInterface::QX11Application\u0026gt;()) { display = x11Application-\u0026gt;display(); connection = x11Application-\u0026gt;connection(); bIsPlatformX11 = true; } XIconifyWindow( display, win-\u0026gt;winId(), 0); Para Maximizar, deve dar um show na janela:\n// If there is only one Window MainWindow * win = (MainWindow *) qApp::activeWindow(); Display *display = nullptr; xcb_connection_t *connection = nullptr; bool bIsPlatformX11 = false; if (auto *x11Application = qGuiApp-\u0026gt;nativeInterface\u0026lt;QNativeInterface::QX11Application\u0026gt;()) { display = x11Application-\u0026gt;display(); connection = x11Application-\u0026gt;connection(); bIsPlatformX11 = true; } // Show XMapWindow( display, win-\u0026gt;winId() ); // Hide // XUnMapWindow( display, win-\u0026gt;winId() ); Referências X Window System X.Org Foundation Wayland ","permalink":"https://danieltak.com.br/posts/maximizar-minimizar-janela-x11-qt/","summary":"Introdução Este post explicará como fazer um snippet de uma aplicação no Qt, utilizando o C++ e a biblioteca do X11. O sistema operacional Linux deve utilizar o protocolo X11.\nMe deparei com este problema, pois o sistema embarcado não possui barra de tarefas, portanto, não é possível minimizar e maximizar da maneira convencional e alguns hotkeys bindings foram utilizados para maximizar e minimizar a aplicação principal.\nO que é o X11?","title":"Maximizar e Minimizar Janelas Qt no X11"},{"content":"Introdução Libxml2 é um XML C parser e toolkit desenvolvido pelo projeto Gnome.\nLibxml2 é conhecida por ser muito portátil, a biblioteca deve ser construída e funcionar sem problemas sérios em uma variedade de sistemas (Linux, Unix, Windows, CygWin, MacOS, RISC Os, OS/2, VMS, QNX, MVS, \u0026hellip;).\nPortanto, este XML parser é universal e pode ser utilizado em diversos casos.\nTutoriais:\nhttp://www.xmlsoft.org/examples/ https://gnome.pages.gitlab.gnome.org/libxml2/tutorial/ https://gnome.pages.gitlab.gnome.org/libxml2/examples/ Repositório:\nhttps://github.com/GNOME/libxml2 Espelho do Repositório:\nhttps://gitlab.gnome.org/GNOME/libxml2 SAX vs DOM vs pull parser TL;DR; Use um analisador DOM ou pull com arquivos menores que caibam na RAM. Use um analisador SAX para arquivos grandes que não cabem.\nDepende totalmente da situação, por exemplo, se o arquivo xml for muito grande, você não pode optar pelos analisadores DOM, pois eles primeiro trazem o arquivo para a memória e depois o analisam. Nesse caso, você deve optar pelo analisador SAX, que é leve e consome menos memória.\nO segundo caso é quando o arquivo não é muito grande. Nesse caso, você pode optar pelo analisador XML pull porque, nesse caso, você terá controle total sobre o XML e poderá pular o ciclo de parsing em qualquer lugar, o que não é possível no SAX. Portanto, se a tag que você está procurando é a primeira no arquivo, então por que você iria percorrer o arquivo inteiro?\nPortanto, até onde sei, se você considerar apenas a velocidade com um arquivo pequeno, use o analisador XML pull e, se o arquivo for grande e você quiser analisar tudo, use o SAX.\nQual é a diferença entre DOM e SAX?\nSe você já progamou utilizando o HTML, provavelmente já se deparou com o DOM, que é muito utilizado nas funções do Javascript para realizar o parsing e encontrar os elementos desejados.\nNo SAX, os eventos são acionados quando o XML está sendo analisado. Quando o analisador está analisando o XML e encontra uma tag iniciando (por exemplo, \u0026lt;algo\u0026gt;), ele aciona o evento tagStarted (o nome real do evento pode ser diferente). Da mesma forma, quando o final da tag é encontrado durante a análise (\u0026lt;/algo\u0026gt;), ele aciona o tagEnded. Usar um analisador SAX implica que você precisa lidar com esses eventos e dar sentido aos dados retornados com cada evento.\nNo DOM, não há eventos acionados durante a análise. O XML inteiro é analisado e uma árvore DOM (dos nós no XML) é gerada e retornada. Depois de analisada, o usuário pode navegar na árvore para acessar os vários dados previamente incorporados nos vários nós do XML.\nEm geral, o DOM é mais fácil de usar, mas tem a sobrecarga de analisar todo o XML antes que você possa começar a usá-lo, ou seja, recomendado para arquivos pequenos.\nSAX (Simple API for XML): É um processador baseado em fluxo. Você tem apenas uma pequena parte na memória a qualquer momento e \u0026ldquo;fareja\u0026rdquo; o fluxo XML implementando o código de retorno de chamada para eventos como tagStarted() etc. Ele quase não usa memória, mas você não pode fazer coisas do \u0026ldquo;DOM\u0026rdquo;, como usar xpath ou percorrer árvores.\nDOM (Document Object Model): Você carrega tudo na memória, o que consome muita memória. Você pode estourar a memória até mesmo com documentos de tamanho médio. Mas você pode usar xpath e percorrer a árvore etc.\nDOM Analisador de modelo de árvore (baseado em objeto) (árvore de nós). O DOM carrega o arquivo na memória e, em seguida, analisa o arquivo. Tem restrições de memória, pois carrega todo o arquivo XML antes de analisá-lo. O DOM é de leitura e gravação (pode inserir ou excluir nós). Se o conteúdo XML for pequeno, prefira o analisador DOM. É possível fazer buscas para trás e para frente para pesquisar as tags e avaliar as informações dentro das tags. Portanto, isso facilita a navegação. Mais lento em tempo de execução. SAX Analisador baseado em eventos (Sequência de eventos). O SAX analisa o arquivo à medida que o lê, ou seja, analisa nó por nó. Não há restrições de memória, pois ele não armazena o conteúdo XML na memória. O SAX é somente leitura, ou seja, não é possível inserir ou excluir o nó. Use o analisador SAX quando o conteúdo da memória for grande. O SAX lê o arquivo XML de cima para baixo e não é possível navegar para trás. Mais rápido em tempo de execução. Diferença resumida Dom Parser - Usa uma abordagem baseada em objetos, ou seja, primeiro carrega todo o XML na memória, converte os nós XML em objetos e, em seguida, começa a analisá-los. Portanto, é bem mais lento.\nAnalisador SAX e PULL - eles usam uma abordagem baseada em eventos. Ambos são praticamente iguais em termos de memória e desempenho. No entanto, há algumas situações distintas sobre quando usá-los, conforme descrito abaixo.\nDom Parser - Use-o quando precisar validar todo o XML antes da análise. Nunca o utilize quando o XML for muito grande e a validação puder ser comprometida. Quando começa a analisar, ele analisa do nó inicial ao nó final. Não há como analisar somente determinados nós.\nSAX - Use-o quando quiser analisar o XML inteiro. Quando começa a analisar, ele analisa do nó inicial ao nó final. Não há como analisar apenas nós específicos.\nPULL - Use-o quando não quiser analisar todo o XML. É mais fácil de implementar do que o SAX, porque você não precisa manter o estado do analisador. Você pode extrair apenas um nó específico no qual esteja interessado.\nMinha sugestão é:\nse precisar de validação, opte pelo DOM; se o tamanho do arquivo for pequeno ou se não estiver interessado em analisar todo o XML, opte pelo PULL; se o tamanho do arquivo for grande ou se precisar analisar todo o arquivo XML, opte pelo SAX. Libere os objetos XML Quando usar DOM, não se esqueça de liberar o buffer e o doc dos objetos xml, principalmente quando o objeto for um membro da classe.\nUse as funções fornecidas pela biblioteca, por exemplo:\nxmlFreeDoc xmlFreeParserCtxt xmlXPathFreeObject xmlXPathFreeContext xmlFreeTextReader xmlFreeTextWriter xmlBufferFree xmlParseFile vs xmlReadFile Embora o tutorial oficial sugira o uso da função xmlParseFile(), ela não é recomendada; em vez disso, use o xmlReadFile. É mais eficiente, respostas no Stack Overflow e mailing list do GNOME também sugerem o uso da função.\nO site oficial possui a seguinte mensagem para a função xmlParseFile:\nDEPRECATED: Use xmlReadFile. parse an XML file and build a tree. Automatic support for ZLIB/Compress compressed document is provided by default if found at compile-time.\nNuma tradução livre:\nDESCONTINUADO: Use xmlReadFile para analisar um arquivo XML e criar uma árvore. O suporte automático para o documento compactado ZLIB/Compress é fornecido por padrão se for encontrado em tempo de compilação.\nPorém, ao invés de xmlReadFile, o novo xmlReader é melhor no quesito que não carrega para a memória todo o arquivo ou o SAX2, porém são mais difíceis de implementar. Creio que em sistemas modernos é muito fácil criar um arquivo XML muito grande, pela grande quantidade de informação. Por mais que a memória RAM esteja maior, todos os outros recursos do computador também estão consumindo mais memória.\nO seguinte exemplo do SOen é um bom ponto de partida:\n#include \u0026lt;stdlib.h\u0026gt; #include \u0026lt;stdio.h\u0026gt; #include \u0026lt;string.h\u0026gt; #include \u0026lt;libxml/tree.h\u0026gt; #include \u0026lt;libxml/parser.h\u0026gt; #include \u0026lt;libxml/parserInternals.h\u0026gt; void start_element_callback(void *user_data, const xmlChar *name, const xmlChar **attrs) { printf(\u0026#34;Beginning of element : %s \\n\u0026#34;, name); while (NULL != attrs \u0026amp;\u0026amp; NULL != attrs[0]) { printf(\u0026#34;attribute: %s=%s\\n\u0026#34;,attrs[0],attrs[1]); attrs = \u0026amp;attrs[2]; } } int main() { const char* xml_path = \u0026#34;hello_world.xml\u0026#34;; FILE *xml_fh = fopen(xml_path,\u0026#34;w+\u0026#34;); fputs(\u0026#34;\u0026lt;hello foo=\\\u0026#34;bar\\\u0026#34; baz=\\\u0026#34;baa\\\u0026#34;\u0026gt;world\u0026lt;/hello\u0026gt;\u0026#34;,xml_fh); fclose(xml_fh); // Initialize all fields to zero xmlSAXHandler sh = { 0 }; // register callback sh.startElement = start_element_callback; xmlParserCtxtPtr ctxt; // create the context if ((ctxt = xmlCreateFileParserCtxt(xml_path)) == NULL) { fprintf(stderr, \u0026#34;Erreur lors de la création du contexte\\n\u0026#34;); return EXIT_FAILURE; } // register sax handler with the context ctxt-\u0026gt;sax = \u0026amp;sh; // parse the doc xmlParseDocument(ctxt); // well-formed document? if (ctxt-\u0026gt;wellFormed) { printf(\u0026#34;XML Document is well formed\\n\u0026#34;); } else { fprintf(stderr, \u0026#34;XML Document isn\u0026#39;t well formed\\n\u0026#34;); //xmlFreeParserCtxt(ctxt); return EXIT_FAILURE; } // free the memory // xmlFreeParserCtxt(ctxt); return EXIT_SUCCESS; } Conversão de xmlChar De acordo com a documentação do xmlstring, um xmlChar é um typedef de unsigned char. A descrição a seguir pode ser vista:\nThis is a basic byte in an UTF-8 encoded string. It\u0026rsquo;s unsigned allowing to pinpoint case where char * are assigned to xmlChar * (possibly making serialization back impossible).\nNuma tradução livre:\nEsse é um byte básico em uma string codificada em UTF-8. Não tem sinal, o que permite identificar o caso em que char * é atribuído a xmlChar * (possivelmente impossibilitando a serialização de volta).\nO xmlChar é o tipo básico utilizado na biblioteca libxml2 e as funções xmlCharStrdup ou xmlCharStrndup podem ser usadas para obter um xmlChar * de um char *.\nHá uma macro BAD_CAST definida:\nMacro to cast a string to an xmlChar * when one know its safe.\nNuma tradução livre:\nMacro para converter uma string em um xmlChar * quando se sabe que é seguro.\nPortanto, um literal de string pode ser usado para criar um xmlChar usando a macro BAD_CAST:\nconst xmlChar* languageNode = BAD_CAST \u0026#34;language\u0026#34;; Ler de um Arquivo Se o xmlParseFile já for usado no projeto e o DOM é desejado, o obsoleto xmlParseFile poderá ser usado:\nstd::string fileName = \u0026#34;path/to/file.xml\u0026#34;; xmlDocPtr docPtr = nullptr; docPtr = xmlParseFile( filename.c_str() ); if (docPtr == nullptr) { fprintf( stderr, \u0026#34;Failed to parse %s\\n\u0026#34;, filename.c_str() ); return; } xmlFreeDoc(docPtr); Caso contrário, se o arquivo for pequeno, use o xmlReadFile:\nstd::string fileName = \u0026#34;path/to/file.xml\u0026#34;; xmlDocPtr docPtr = nullptr; docPtr = xmlReadFile(filename.c_str(), NULL, 0); if (docPtr == nullptr) { fprintf( stderr, \u0026#34;Failed to parse %s\\n\u0026#34;, filename.c_str() ); return; } xmlFreeDoc(docPtr); Ou para arquivos muitos grandes, verifique o exemplo do xmlReader ou do\nLer os Nós Após ler o arquivo, uma árvore xml será obtida e os nós obtidos podem ser manipulados com o tipo xmlNodePtr.\n//Get all nodes xmlNodePtr pRootElement = xmlDocGetRootElement(docPtr); E um condicional if() pode ser adicionado para verificar se o nome do elemento é o correto, utilizando a função xmlStrcmp para comparar strings.\nif ( !(xmlStrcmp( pRootElement-\u0026gt;name, BAD_CAST \u0026#34;application_content_update\u0026#34; ) ) ) E os nós filhos podem ser obitos:\nauto childrenNodes = pRootElement-\u0026gt;children; E o conteúdo de cada nó, seja do filho ou do pai:\nxmlChar * childContent = childrenNodes-\u0026gt;content; xmlChar * rootContent = pRootElement-\u0026gt;content; Ler da Memória O xmlParseMemory pode ser usado para ler a partir da memória para tamanhos de buffer pequenos, mas é obsoleto.\nDEPRECATED: Use xmlReadMemory. parse an XML in-memory block and build a tree.\nNuma tradução livre:\nDESCONTINUADO: Use xmlReadMemory. Analise um bloco XML na memória e crie uma árvore.\nconst char *pMemory = \u0026#34;\u0026lt;?xml version=\u0026#39;1.0\u0026#39;?\u0026gt;\\n\\ \u0026lt;document xmlns:xi=\\\u0026#34;http://www.w3.org/2003/XInclude\\\u0026#34;\u0026gt;\\n\\ \u0026lt;p\u0026gt;List of people:\u0026lt;/p\u0026gt;\\n\\ \u0026lt;xi:include href=\\\u0026#34;sql:select_name_from_people\\\u0026#34;/\u0026gt;\\n\\ \u0026lt;/document\u0026gt;\\n\u0026#34;; xmlDocPtr docPtr = nullptr; docPtr = xmlParseMemory(pMemory, strlen(pMemory)); if (docPtr == nullptr) { fprintf( stderr, \u0026#34;Failed to parse %s\\n\u0026#34;, pMemory ); return; } xmlFreeDoc(docPtr); Use o xmlReadMemory em vez da função obsoleta:\nxmlDocPtr docPtr = nullptr; docPtr = xmlReadMemory(pMemory, strlen(pMemory), \u0026#34;pMemory.xml\u0026#34;, NULL, 0); if (docPtr == nullptr) { fprintf( stderr, \u0026#34;Failed to parse %s\\n\u0026#34;, pMemory ); return; } xmlFreeDoc(docPtr); Escrever para Arquivo O xmlNewTextWriterFilename pode ser usado para gravar no arquivo, algumas funções de gravação do xmlwriter usam o xmlTextWriterPtr como argumento para criar o conteúdo do xml.\nDepois de criar o conteúdo, encerre o documento e libere o objeto.\nint rc; std::string str(\u0026#34;/path/to/filename.xml\u0026#34;); xmlTextWriterPtr writer = xmlNewTextWriterFilename(str.c_str(), 0); rc = xmlTextWriterStartDocument(writer, \u0026#34;1.0\u0026#34;, \u0026#34;UTF-8\u0026#34;, NULL); if(rc \u0026lt; 0) { std::cout \u0026lt;\u0026lt; \u0026#34;An error occurred on xmlTextWriterStartDocument.\u0026#34; \u0026lt;\u0026lt; std::endl; } rc = xmlTextWriterStartElement(writer, BAD_CAST \u0026#34;document\u0026#34;); rc = xmlTextWriterWriteAttribute(writer, BAD_CAST \u0026#34;xmlns:xi\u0026#34;, BAD_CAST \u0026#34;http://www.w3.org/2003/XInclude\u0026#34; ); rc = xmlTextWriterWriteFormatComment(writer, \u0026#34;This is a comment\u0026#34; ); rc = xmlTextWriterEndElement(writer); rc = xmlTextWriterWriteString(writer, BAD_CAST \u0026#34;List of people:\u0026#34;); rc = xmlTextWriterEndDocument(writer); xmlFreeTextWriter(writer); Escrever para a Memória O xmlNewTextWriterMemory pode ser usado para gravar na memória do buffer, algumas funções de gravação do xmlwriter usam o xmlTextWriterPtr como argumento para criar o conteúdo do xml.\nDepois de criar o conteúdo, encerre o documento e libere os objetos (escritor e buffer).\nxmlBufferPtr buffer = xmlBufferCreate(); xmlTextWriterPtr writer = xmlNewTextWriterMemory(buffer, 0); rc = xmlTextWriterStartDocument(writer, \u0026#34;1.0\u0026#34;, \u0026#34;UTF-8\u0026#34;, NULL); if(rc \u0026lt; 0) { std::cout \u0026lt;\u0026lt; \u0026#34;An error occurred on xmlTextWriterStartDocument.\u0026#34; \u0026lt;\u0026lt; std::endl; } rc = xmlTextWriterStartElement(writer, BAD_CAST \u0026#34;document\u0026#34;); rc = xmlTextWriterWriteAttribute(writer, BAD_CAST \u0026#34;xmlns:xi\u0026#34;, BAD_CAST \u0026#34;http://www.w3.org/2003/XInclude\u0026#34; ); rc = xmlTextWriterWriteFormatComment(writer, \u0026#34;This is a comment\u0026#34; ); rc = xmlTextWriterEndElement(writer); rc = xmlTextWriterWriteString(writer, BAD_CAST \u0026#34;List of people:\u0026#34;); rc = xmlTextWriterEndDocument(writer); std::string memory = reinterpret_cast\u0026lt;char*\u0026gt; buffer-\u0026gt;content; std::cout \u0026lt;\u0026lt; memory \u0026lt;\u0026lt; std::endl; xmlFreeTextWriter(writer); xmlBufferFree(buffer); Ler SVG Quando você tem um xmlNodePtr de uma árvore xml, o exemplo a seguir usa xmlNodePtr \u0026amp;pNode como argumento da função e o seguinte xml:\n\u0026lt;?xml version=\u0026#34;1.0\u0026#34; encoding=\u0026#34;UTF-8\u0026#34;?\u0026gt; \u0026lt;svg_content\u0026gt; \u0026lt;position\u0026gt;1\u0026lt;/position\u0026gt; \u0026lt;svg xmlns=\u0026#34;http://www.w3.org/2000/svg\u0026#34; id=\u0026#34;1\u0026#34; viewBox=\u0026#34;0 0 585 240\u0026#34; preserveAspectRatio=\u0026#34;xMidYMid meet\u0026#34;\u0026gt; \u0026lt;rect id=\u0026#34;rect_1\u0026#34; x=\u0026#34;0\u0026#34; y=\u0026#34;0\u0026#34; width=\u0026#34;585\u0026#34; height=\u0026#34;20\u0026#34; stroke-width=\u0026#34;1\u0026#34; stroke=\u0026#34;#FFFFFF\u0026#34; fill=\u0026#34;#000000\u0026#34;/\u0026gt; \u0026lt;/svg\u0026gt; \u0026lt;/svg_content\u0026gt; O xmlNodeDump pode ser usado para extrair os dados svg a serem despejados em um renderizador svg:\nPegar o Atributo O xmlNode é a estrutura usada na árvore resultante da análise dos dados xml. O atributo dessa estrutura pode ser acessado a partir de properties.\ntypedef struct _xmlNode xmlNode; typedef xmlNode *xmlNodePtr; struct _xmlNode { void *_private;\t/* application data */ xmlElementType type;\t/* type number, must be second ! */ const xmlChar *name; /* the name of the node, or the entity */ struct _xmlNode *children;\t/* parent-\u0026gt;childs link */ struct _xmlNode *last;\t/* last child link */ struct _xmlNode *parent;\t/* child-\u0026gt;parent link */ struct _xmlNode *next;\t/* next sibling link */ struct _xmlNode *prev;\t/* previous sibling link */ struct _xmlDoc *doc;\t/* the containing document */ /* End of common part */ xmlNs *ns; /* pointer to the associated namespace */ xmlChar *content; /* the content */ struct _xmlAttr *properties;/* properties list */ xmlNs *nsDef; /* namespace definitions on this node */ void *psvi;\t/* for type/PSVI information */ unsigned short line;\t/* line number */ unsigned short extra;\t/* extra data for XPath/XSLT */ }; O seguinte código é um exemplo de como acessar os atributos:\nxmlAttrPtr attribute = svgValues-\u0026gt;properties; xmlChar* content = (char*) xmlNodeListGetString(svgValues-\u0026gt;doc, attribute-\u0026gt;children, 0); Verificar se o arquivo mudou Geralmente os arquivos XML são usados como arquivos de configuração e exigem vários requisitos, que o usuário final não pode alterar o arquivo final manualmente, somente pelo software.\nComo verificar se um arquivo foi alterado?\nIntuitivamente, a data de modificação seria utilizada. Mas essa forma é propensa a erros e a verificação do hash deve ser utilizada.\nConforme esta resposta do SOen, a data de modificação deve ser utilizada pelo desempenho, e se for diferente, realizar a verificação de hash.\nPorque a verificação de hash é computacionalmente pesado, então a verificação de data de modificação é um filtro para diminuir a lista de arquivos.\nReferências libxml2 API Modules libxml2 wiki SAX parser vs XMLPull parser What is the difference between SAX and DOM? Difference among XML SAX parser, Pull parser \u0026amp; DOM Parser in android Tutorial xmlReader SAX2 xmlstring ","permalink":"https://danieltak.com.br/posts/xml/","summary":"Introdução Libxml2 é um XML C parser e toolkit desenvolvido pelo projeto Gnome.\nLibxml2 é conhecida por ser muito portátil, a biblioteca deve ser construída e funcionar sem problemas sérios em uma variedade de sistemas (Linux, Unix, Windows, CygWin, MacOS, RISC Os, OS/2, VMS, QNX, MVS, \u0026hellip;).\nPortanto, este XML parser é universal e pode ser utilizado em diversos casos.\nTutoriais:\nhttp://www.xmlsoft.org/examples/ https://gnome.pages.gitlab.gnome.org/libxml2/tutorial/ https://gnome.pages.gitlab.gnome.org/libxml2/examples/ Repositório:\nhttps://github.com/GNOME/libxml2 Espelho do Repositório:\nhttps://gitlab.gnome.org/GNOME/libxml2 SAX vs DOM vs pull parser TL;DR; Use um analisador DOM ou pull com arquivos menores que caibam na RAM.","title":"XML parser"},{"content":"O que é? O alinhamento de estruturas de dados é a forma que um dado é organizado e acessado na memória do computador. E pode ser organizado em três temas:\nData alignment - alinhamento de dados Data structure padding - preenchimento da estrutura de dados Data structure packing - empacotamento da estrutura de dados Alinhamento Na maioria dos cenários, você nunca precisa se preocupar com o alinhamento porque o alinhamento padrão já é ideal. Mas ao trabalhar com baixo nível e sistemas embarcados, frequentemente irá se deparar com este assunto.\nFunção alignof Para obter o alinhamento, em bytes, o operador alignof() pode ser usado.\nA seguinte estrutura possui um alinhamento de 4 bytes e será explicado na sessão Preenchimento.\n#include \u0026lt;iostream\u0026gt; struct TestStructure { char AA; int BB; char CC; }; int main() { struct TestStructure test; std::cout \u0026lt;\u0026lt; \u0026#34;Size of TestStructure alignment: \u0026#34; \u0026lt;\u0026lt; alignof(test) \u0026lt;\u0026lt; std::endl; } Função alignas Para especificar o alinhamento de uma estrutura o especificador alignas() pode ser usado.\n#include \u0026lt;iostream\u0026gt; struct alignas(8) MyAlignedStructure {}; struct TestStructure { char AA; int BB; char CC; }; int main() { struct TestStructure test; struct MyAlignedStructure testAlignedAs; std::cout \u0026lt;\u0026lt; \u0026#34;Size of TestStructure alignment: \u0026#34; \u0026lt;\u0026lt; alignof(test) \u0026lt;\u0026lt; std::endl; std::cout \u0026lt;\u0026lt; \u0026#34;Size of MyAlignedStructure alignment: \u0026#34; \u0026lt;\u0026lt; alignof(testAlignedAs) \u0026lt;\u0026lt; std::endl; } Resultado:\nSize of TestStructure alignment: 4\rSize of MyAlignedStructure alignment: 8 Quando múltiplos alignas são aplicados à mesma declaração, aquele com o maior valor é usado. Um alignas valor de 0 é ignorado.\n#include \u0026lt;iostream\u0026gt; struct alignas(8) alignas(16) MyAlignedStructure {}; struct TestStructure { char AA; int BB; char CC; }; union alignas(0) U1 { int i; float f; }; union U2 { int i; float f; }; int main() { struct TestStructure test; struct MyAlignedStructure testAlignedAs; union U1 firstUnion; union U2 secondUnion; std::cout \u0026lt;\u0026lt; \u0026#34;Size of TestStructure alignment: \u0026#34; \u0026lt;\u0026lt; alignof(test) \u0026lt;\u0026lt; std::endl; std::cout \u0026lt;\u0026lt; \u0026#34;Size of MyAlignedStructure alignment: \u0026#34; \u0026lt;\u0026lt; alignof(testAlignedAs) \u0026lt;\u0026lt; std::endl; std::cout \u0026lt;\u0026lt; \u0026#34;Size of firstUnion alignment: \u0026#34; \u0026lt;\u0026lt; alignof(firstUnion) \u0026lt;\u0026lt; std::endl; std::cout \u0026lt;\u0026lt; \u0026#34;Size of secondUnion alignment: \u0026#34; \u0026lt;\u0026lt; alignof(secondUnion) \u0026lt;\u0026lt; std::endl; } Resultado:\nSize of TestStructure alignment: 4\rSize of MyAlignedStructure alignment: 16\rSize of firstUnion alignment: 4\rSize of secondUnion alignment: 4 Você pode fornecer um tipo como o valor de alinhamento. O alinhamento padrão do tipo é usado como o valor de alinhamento.\n#include \u0026lt;iostream\u0026gt; union alignas(long) U1 { int i; float f; }; union U2 { int i; float f; }; int main() { union U1 firstUnion; union U2 secondUnion; std::cout \u0026lt;\u0026lt; \u0026#34;Size of firstUnion alignment: \u0026#34; \u0026lt;\u0026lt; alignof(firstUnion) \u0026lt;\u0026lt; std::endl; std::cout \u0026lt;\u0026lt; \u0026#34;Size of secondUnion alignment: \u0026#34; \u0026lt;\u0026lt; alignof(secondUnion) \u0026lt;\u0026lt; std::endl; } Resultado:\nSize of firstUnion alignment: 8\rSize of secondUnion alignment: 4 Um pacote de parâmetros de modelo (alignas (pack...)) pode ser usado para o valor de alinhamento. O maior valor de alinhamento de todos os elementos da embalagem é usado.\n#include \u0026lt;iostream\u0026gt; template \u0026lt;typename... Ts\u0026gt; class alignas(Ts...) C2 { char c; }; int main() { C2\u0026lt;\u0026gt; c1; C2\u0026lt;short, int\u0026gt; c4; C2\u0026lt;int, float, double\u0026gt; c8; std::cout \u0026lt;\u0026lt; \u0026#34;Size of c1 alignment: \u0026#34; \u0026lt;\u0026lt; alignof(c1) \u0026lt;\u0026lt; std::endl; std::cout \u0026lt;\u0026lt; \u0026#34;Size of c4 alignment: \u0026#34; \u0026lt;\u0026lt; alignof(c4) \u0026lt;\u0026lt; std::endl; std::cout \u0026lt;\u0026lt; \u0026#34;Size of c8 alignment: \u0026#34; \u0026lt;\u0026lt; alignof(c8) \u0026lt;\u0026lt; std::endl; return 0; } Resultado:\nSize of c1 alignment: 1\rSize of c4 alignment: 4\rSize of c8 alignment: 8 Preenchimento A maioria dos compiladores, quando você declara um struct, insere preenchimento entre os membros para garantir que eles sejam alinhados aos endereços apropriados na memória (geralmente um múltiplo do tamanho do tipo). Isso evita a penalidade de desempenho (ou erro total) em algumas arquiteturas associadas ao acesso a variáveis que não estão alinhadas corretamente.\nNo exemplo abaixo, temos duas variáveis do tipo char, AA e CC, e uma do tipo int, nomeada BB.\n#include \u0026lt;iostream\u0026gt; struct TestStructure { char AA; int BB; char CC; }; int main() { struct TestStructure test; std::cout \u0026lt;\u0026lt; \u0026#34;Size of char:\u0026#34; \u0026lt;\u0026lt; \u0026#34; \u0026#34; \u0026lt;\u0026lt; sizeof(test.AA) \u0026lt;\u0026lt; std::endl; std::cout \u0026lt;\u0026lt; \u0026#34;Size of int:\u0026#34; \u0026lt;\u0026lt; \u0026#34; \u0026#34; \u0026lt;\u0026lt; sizeof(test.BB) \u0026lt;\u0026lt; std::endl; std::cout \u0026lt;\u0026lt; \u0026#34;Size of char:\u0026#34; \u0026lt;\u0026lt; \u0026#34; \u0026#34; \u0026lt;\u0026lt; sizeof(test.CC) \u0026lt;\u0026lt; std::endl; } O tamanho individual de cada variável foi obitda com a função sizeof() e a seguinte saída:\nSize of char: 1\rSize of int: 4\rSize of char: 1 Qual é o tamanho da struct?\nIntuitivamente falamos que seria a soma das variáveis da estrutura, ou seja, 6 bytes.\nPorém, essa afirmação está errada e usando a função sizeof(), verificamos que o tamanho da estrutura é de 12 bytes!\nIsso ocorre por causa do preenchimento (padding), conforme ilustrado abaixo:\n| 1 | 2 | 3 | 4 |\r| AA(1) | pad.................. | // 1 byte + 3 bytes pad\r| BB(1) | BB(2) | BB(3) | BB(4) | // 4 bytes\r| CC(1) | pad.................. | // 1 byte + 3 bytes pad A variável AA ocupa 4 bytes, sendo 1 byte a variável e 3 bytes de preenchimento.\n#pragma pack O #pragma pack instrui o compilador a empacotar os membros da estrutura com um alinhamento específico. A maioria dos compiladores, quando você declara um struct, insere preenchimento entre os membros para garantir que eles sejam alinhados aos endereços apropriados na memória (geralmente um múltiplo do tamanho do tipo de dado).\nEntão ao especificar #pragma pack(1), o alinhamento é de 1 byte para todos os membros do escopo daquela definição. Menos para as struturas que forem sobrescritas com alignas() ou outra forma de alterar o alinhamento.\n#include \u0026lt;iostream\u0026gt; #pragma pack(1) struct alignas(2) MyAlignedStructure {}; struct TestStructure { char AA; int BB; char CC; }; int main() { struct TestStructure test; struct MyAlignedStructure testAlignedAs; std::cout \u0026lt;\u0026lt; \u0026#34;Size of TestStructure alignment: \u0026#34; \u0026lt;\u0026lt; alignof(test) \u0026lt;\u0026lt; std::endl; std::cout \u0026lt;\u0026lt; \u0026#34;Size of MyAlignedStructure alignment: \u0026#34; \u0026lt;\u0026lt; alignof(testAlignedAs) \u0026lt;\u0026lt; std::endl; std::cout \u0026lt;\u0026lt; \u0026#34;Size of testAlignedAs struct:\u0026#34; \u0026lt;\u0026lt; \u0026#34; \u0026#34; \u0026lt;\u0026lt; sizeof(testAlignedAs) \u0026lt;\u0026lt; std::endl; std::cout \u0026lt;\u0026lt; \u0026#34;Size of test struct:\u0026#34; \u0026lt;\u0026lt; \u0026#34; \u0026#34; \u0026lt;\u0026lt; sizeof(test) \u0026lt;\u0026lt; std::endl; } Resultado:\nSize of TestStructure alignment: 1\rSize of MyAlignedStructure alignment: 2\rSize of testAlignedAs struct: 2\rSize of test struct: 6 Então com o alinhamento de 1 byte, o tamanho da estrutura é a soma de seus membros.\nE ao utilizar um alinhamento de 2 bytes?\n#include \u0026lt;iostream\u0026gt; #pragma pack(2) struct alignas(2) MyAlignedStructure {}; struct TestStructure { char AA; int BB; char CC; }; int main() { struct TestStructure test; struct MyAlignedStructure testAlignedAs; std::cout \u0026lt;\u0026lt; \u0026#34;Size of TestStructure alignment: \u0026#34; \u0026lt;\u0026lt; alignof(test) \u0026lt;\u0026lt; std::endl; std::cout \u0026lt;\u0026lt; \u0026#34;Size of MyAlignedStructure alignment: \u0026#34; \u0026lt;\u0026lt; alignof(testAlignedAs) \u0026lt;\u0026lt; std::endl; std::cout \u0026lt;\u0026lt; \u0026#34;Size of testAlignedAs struct:\u0026#34; \u0026lt;\u0026lt; \u0026#34; \u0026#34; \u0026lt;\u0026lt; sizeof(testAlignedAs) \u0026lt;\u0026lt; std::endl; std::cout \u0026lt;\u0026lt; \u0026#34;Size of test struct:\u0026#34; \u0026lt;\u0026lt; \u0026#34; \u0026#34; \u0026lt;\u0026lt; sizeof(test) \u0026lt;\u0026lt; std::endl; } Resultado:\nSize of TestStructure alignment: 2\rSize of MyAlignedStructure alignment: 2\rSize of testAlignedAs struct: 2\rSize of test struct: 8 Então a estrutura é empacotada da seguinte forma:\n| 1 | 2 |\r| AA(1) | pad.. | // 1 byte + 1 byte pad\r| BB(1) | BB(2) | // 2 bytes\r| BB(3) | BB(4) | // 2 bytes\r| CC(1) | pad.. | // 1 byte + 1 byte pad Problema O artigo \u0026ldquo;Anybody who writes #pragma pack(1) may as well just wear a sign on their forehead that says “I hate RISC”\u0026rdquo; explica os riscos de usar o #pragma pack(1).\nIsso é verdade em sistemas desktop, porém em sistemas embarcados, nem tanto\u0026hellip;\nEm muitos casos o gargalo não está no processamento, mas em outros locais, como a comunicação. Então a perda de desempenho na otimização do processamento se torna aceitável, ao ganhar mais espaço para criar um pacote de dados e evitar os preenchimentos, ou até mesmo para dar compatibilidade entre dispositivos diferentes.\nPortanto, cada caso deve ser analisado e não existem dogmas.\nOpinião Não utilizar as diretivas de compilador #pragma, pois ela é dependente do compilador utilizado. A maioria dos compiladores possuem suporte e um comportamento similar, mas em raros casos isso não é verdade. E é bem quando você precisar entregar o projeto atrasado, que a nova versão de um compilador pode quebrar tudo.\nEsse tipo de abordagem é muito utilizado por programador de C ou programadores muito experientes acostumados com o C++ 98.\nO recomendado é se manter no STL do C++ e usar as funções padrões fornecidas e testadas pelo mundo inteiro.\nMas nos casos em que é necessário usar o pragma pack, opte por usar o push e o pop.\nAprofundamento A principal referência é o The Lost Art of Structure Packing, um guia em inglês que aborda em outras linguagens de programação.\nTambém é possível usar as diretivas #pragma pack(push, n) e #pragma pack(pop).\nUm artigo no Geek for Geeks é sempre recomendado.\nReferências Alinhamento - Microsoft C++ Structure padding and packing The Lost Art of Structure Packing alignof() - Cpp Reference alignas() - Cpp Reference #pragma pack effect Anybody who writes #pragma pack(1) may as well just wear a sign on their forehead that says “I hate RISC” Structure Member Alignment, Padding and Data Packing ","permalink":"https://danieltak.com.br/posts/alinhamento-estrutura/","summary":"O que é? O alinhamento de estruturas de dados é a forma que um dado é organizado e acessado na memória do computador. E pode ser organizado em três temas:\nData alignment - alinhamento de dados Data structure padding - preenchimento da estrutura de dados Data structure packing - empacotamento da estrutura de dados Alinhamento Na maioria dos cenários, você nunca precisa se preocupar com o alinhamento porque o alinhamento padrão já é ideal.","title":"Alinhamento, Preenchimento e Empacotamento de Estruturas de Dados"},{"content":"Introdução Como diria o ditado popular:\nA curiosidade matou o gato.\nMas bem-aventurado esse gato que fez muita coisa na vida e inclusive errou!\nAfinal, errar é humano e todos erramos diariamente, não podemos ter medo de desbravar o desconhecido ou de perguntar aos outros. Quando mais novo, era uma pessoa introvertida e demorei para entender isso\u0026hellip;\nEsse será um blog com algumas dessas pequenas aventuras sobre o conhecimento.\nObjetivo O principal tema será sobre programação e problemas que achei difícil encontrar informação, principalmente no cotidiano do programador.\nMas alguns devaneios também podem ocorrer, como receitas culinárias ou filosofia e paradigmas da programação.\nMinha breve história Sou graduado em Engenharia Elétrica e comecei a carreira trabalhando na indústria, então muitas vezes trarei assuntos sobre o baixo nível e sistemas embarcados, com sensores, instrumentos, controladores, protocolos de comunicação, sistemas de visão e IHMs.\nHoje faço software para Sistemas Embarcados utilizando principalmente o C++ e Linux, mas já fui administrador de Windows Server e fiz muito website para parentes e amigos, inclusive participei de uma start-up usando o framework Laravel e a linguagem PHP.\nNo trabalho corporativo estou acostumado a escrever muitos relatórios e usar muito a terceira pessoa, pois me ensinaram que o relatório deve ser impessoal. Tentarei mudar esse estilo de escrita, fazendo algo mais pessoal e divertido.\nMotivação Eu sempre gostei de programar e descobrir tecnologias novas, inclusive, participei muito do StackOverflow e outros fóruns de ajuda mais antigos. Realizo algumas anotações em inglês de problemas interessantes que encontrei no cotidiano, mas nunca formalizei em nenhum lugar essa informação e sempre tive a vontade de escrever um blog.\nNa universidade pública que fiz minha graduação, frequentemente reforçavam que estávamos estudando com o dinheiro público, portanto, devemos sempre que puder, devolver um pouco desse conhecimento para a sociedade e agir com ética.\nIdioma A Língua Portuguesa será a principal escolha pelos seguintes motivos:\nDevolver à sociedade brasileira um pouco do que ganhei com a educação pública; Há muito conteúdo de qualidade em inglês e a concorrência é alta; O meu domínio .com.br possui maior alcance no Brasil; Ajudar a comunidade lusófona com conteúdo um pouco mais específico. Por escolher um conteúdo específico o público será reduzido, mas é o público-alvo que desejo.\nConteúdo Tentarei evitar aqueles conteúdos com receitas de bolos ou chamadas sensacionalistas do tipo:\n10 motivos de usar tal tecnologia para melhorar sua carreira!\nQuem precisa dessas chamadas clickbait são vendedores de cursos ou influencers que ganham a vida com o conteúdo.\nNem sempre a profundidade do conteúdo será grande, mas prometo que tentarei usar investigações técnicas e evitar alguns achismos.\n","permalink":"https://danieltak.com.br/posts/ola-mundo/","summary":"Introdução Como diria o ditado popular:\nA curiosidade matou o gato.\nMas bem-aventurado esse gato que fez muita coisa na vida e inclusive errou!\nAfinal, errar é humano e todos erramos diariamente, não podemos ter medo de desbravar o desconhecido ou de perguntar aos outros. Quando mais novo, era uma pessoa introvertida e demorei para entender isso\u0026hellip;\nEsse será um blog com algumas dessas pequenas aventuras sobre o conhecimento.\nObjetivo O principal tema será sobre programação e problemas que achei difícil encontrar informação, principalmente no cotidiano do programador.","title":"Olá Mundo!"}]